{"config":{"lang":["ja"],"separator":"[\\s\\-\u3000\u3001\u3002\uff0c\uff0e\uff1f\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"About","text":""},{"location":"#_1","title":"\u524d\u8a00","text":"<p>\u6b61\u8fce\u4f86\u5230\u4e09\u500b\u6708\u7684\u7b46\u8a18! \u770b\u5230\u6709\u8da3\u7684\u77e5\u8b58\u5beb\u4e0b\u4f86\uff0c\u505a\u70ba\u8907\u7fd2\u6216\u5206\u4eab\u4f7f\u7528\u3002  </p>"},{"location":"#_2","title":"\u7b46\u8a18\u8d85\u9023\u7d50","text":""},{"location":"#_3","title":"\u5c0f\u77e5\u8b58","text":"<ol> <li>Information theory and Data Compression</li> <li>C++</li> <li>Formal Language</li> </ol>"},{"location":"#_4","title":"\u5237\u984c","text":"<ol> <li>HDLBits(\u5df2\u7834\u53f0)</li> <li>NowCoder</li> </ol>"},{"location":"#about-me","title":"About Me","text":"<p>My Blog My Github My Twitter </p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/","title":"HDLBits tutorial","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#getting-started","title":"Getting Started","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#getting-started_1","title":"Getting Started","text":"<p>Website: https://hdlbits.01xz.net/wiki/Step_one</p> <p>\u9019\u984c\u662f\u6559\u4f60\u600e\u9ebc\u64cd\u4f5c\u5e73\u53f0\u7684\uff0c\u7136\u5f8c\u8981\u5c0done\u8f38\u51fa1\u3002\u9019\u88e1\u6709\u500b\u7d30\u7bc0\u662f\u7d66\u503c\u6642\u76e1\u91cf\u5beb\u7684\u6e05\u695a\u4e00\u9ede\uff0c\u50cf\u9019\u88e11bit\uff0c\u5c31\u53ef\u4ee5\u4e0d\u662f\u53ea\u7d661\uff0c\u800c\u662f\u7d661'b1\u3002 Verilog<pre><code>module top_module( output one );\nassign one = 1'b1;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#output-zero","title":"Output Zero","text":"<p>Website: https://hdlbits.01xz.net/wiki/Zero</p> <p>\u9019\u984c\u8ddf\u4e0a\u984c\u5927\u540c\u5c0f\u7570\uff0c\u53ea\u662f\u63db\u6210\u8f38\u51fa0\u3002 Verilog<pre><code>module top_module(\noutput zero\n);// Module body starts after semicolon\nassign zero = 1'b0;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#verilog-language","title":"Verilog Language","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#basics","title":"Basics","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#simple-wire","title":"Simple wire","text":"<p>Website: https://hdlbits.01xz.net/wiki/Wire</p> <p>\u9019\u984c\u5c31\u662f\u7c21\u55ae\u7684\u628aout\u548cin\u63a5\u5728\u4e00\u8d77\u3002 Verilog<pre><code>module top_module( input in, output out );\nassign out = in;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#four-wires","title":"Four wires","text":"<p>Website: https://hdlbits.01xz.net/wiki/Wire4</p> <p>\u9019\u984c\u5c31\u7167\u8457\u5716\u63a5\u7dda\uff0cw\u548ca\u76f8\u63a5\uff0cxy\u548cb\u76f8\u63a5\uff0cz\u548cc\u76f8\u63a5\u3002 Verilog<pre><code>module top_module( input a,b,c,\noutput w,x,y,z );\nassign w = a;\nassign x = b;\nassign y = b;\nassign z = c;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#inverter","title":"Inverter","text":"<p>Website: https://hdlbits.01xz.net/wiki/Notgate</p> <p>\u9019\u984c\u8981\u5beb\u4e00\u500bnot gate\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cverilog\u4e2d\u6709\u5206bitwise operator\u548clogical operator\uff0cbitwise operator\u5c31\u662f\u5c0dinput\u7684\u6bcf\u500bbit\u90fd\u505a\u76f8\u5c0d\u7684\u904b\u7b97\uff0c\u6240\u4ee5\u6700\u5f8c\u8f38\u51fa\u7684bit\u6578\u6703\u8ddfinput\u4e00\u6a23\u3002\u800clogical operator\u53ea\u6703\u908f\u8f2f\u4e0a\u505a\u904b\u7b97\uff0c\u6700\u5f8c\u53ea\u6703\u8f38\u51fa1 bit\u3002  \u6240\u4ee5\u8aaabitwise not\u7b26\u865f\u662f<code>~</code>\uff0c\u800clogical not\u7b26\u865f\u662f<code>!</code>\uff0c\u96d6\u7136\u9019\u984cinput\u53ea\u67091 bit\u6c92\u5dee\uff0c\u4e0d\u904e\u7d30\u7bc0\u53ef\u80fd\u8981\u6ce8\u610f\u3002 Verilog<pre><code>module top_module( input in, output out );\nassign out = ~in;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#and-gate","title":"AND gate","text":"<p>Website: https://hdlbits.01xz.net/wiki/Andgate</p> <p>\u9019\u984c\u5c31\u523b\u4e00\u500band gate\uff0c\u8ddf\u4e0a\u984c\u5dee\u4e0d\u591a\uff0c\u8981\u6ce8\u610f\u7684\u662fbitwise and\u7b26\u865f\u662f<code>&amp;</code>\uff0c\u800clogical and\u7b26\u865f\u662f<code>&amp;&amp;</code>\uff0c Verilog<pre><code>module top_module( input a, input b, output out );\nassign out = a &amp; b;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#nor-gate","title":"NOR gate","text":"<p>Website: https://hdlbits.01xz.net/wiki/Norgate</p> <p>\u9019\u984c\u5c31\u523b\u4e00\u500bnor gate\uff0c\u8ddf\u4e0a\u984c\u5dee\u4e0d\u591a\uff0c\u8981\u6ce8\u610f\u7684\u662fbitwise or\u7b26\u865f\u662f<code>~</code>\uff0c\u800clogical and\u7b26\u865f\u662f<code>~~</code>\uff0c Verilog<pre><code>module top_module( input a, input b, output out );\nassign out = ~(a | b);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#xnor-gate","title":"XNOR gate","text":"<p>Website: https://hdlbits.01xz.net/wiki/Xnorgate</p> <p>\u9019\u984c\u5c31\u523b\u4e00\u500bxnor gate\uff0c\u8ddf\u4e0a\u984c\u5dee\u4e0d\u591a\uff0c\u8981\u6ce8\u610f\u7684\u662fbitwise xor\u7b26\u865f\u662f<code>^</code>\uff0c\u800cverilog\u4e2d\u6c92\u6709logical xor\u904b\u7b97\u3002 Verilog<pre><code>module top_module( input a, input b, output out );\nassign out = ~(a ^ b);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#declaring-wires","title":"Declaring wires","text":"<p>Website: https://hdlbits.01xz.net/wiki/Wire_decl</p> <p>\u9019\u984c\u5f15\u5165\u4e86wire\u7684\u6982\u5ff5\uff0cwire\u5c31\u662f\u5728\u7dda\u8def\u8907\u96dc\u6642\uff0c\u63d0\u4f9b\u7bc0\u9ede\u4f86\u5e6b\u52a9\u95b1\u8b80\u3002\u88dc\u5145\u4e00\u4e0b\uff0cinput\u548coutput\u672c\u8eab\u5c31\u662fwire\u3002 Verilog<pre><code>`default_nettype none\nmodule top_module(\ninput a,\ninput b,\ninput c,\ninput d,\noutput out,\noutput out_n   ); wire a_and_b, c_and_d;\nassign a_and_b = a &amp; b;\nassign c_and_d = c &amp; d;\nassign out = a_and_b | c_and_d;\nassign out_n = ~out;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#7458-chip","title":"7458 chip","text":"<p>Website: https://hdlbits.01xz.net/wiki/7458</p> <p>\u9019\u984c\u8ddf\u4e0a\u984c\u985e\u4f3c\uff0c\u5c31\u662f\u7dda\u8def\u7a0d\u5fae\u8907\u96dc\uff0c\u53ef\u4ee5\u76f4\u63a5\u5beb\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528wire\u5e6b\u52a9\u95b1\u8b80\u3002 Verilog<pre><code>module top_module ( input p1a, p1b, p1c, p1d, p1e, p1f,\noutput p1y,\ninput p2a, p2b, p2c, p2d,\noutput p2y );\nassign p1y = (p1a &amp; p1b &amp; p1c) | (p1d &amp; p1e &amp; p1f);\nassign p2y = (p2a &amp; p2b) | (p2c &amp; p2d);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#vectors","title":"Vectors","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#vectors_1","title":"Vectors","text":"<p>Website: https://hdlbits.01xz.net/wiki/Vector0</p> <p>\u9019\u984c\u662f\u5c07[2:0] vec\u5206\u5225\u8ce6\u503c\u7d66[2:0] outv\u548c{o2,o1,o0}\uff0c\u88dc\u5145\u8aaa\u660e\uff0c<code>assign {o2,o1,o0} = vec;</code>\u7b49\u50f9\u65bc<code>assign o2 = vec[2]; assign o1 = vec[1]; assign o0 = vec[0];</code>\u3002 Verilog<pre><code>module top_module ( input wire [2:0] vec,\noutput wire [2:0] outv,\noutput wire o2,\noutput wire o1,\noutput wire o0  ); // Module body starts after module declaration\nassign outv = vec;\nassign {o2,o1,o0} = vec;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#vectors-in-more-detail","title":"Vectors in more detail","text":"<p>Website: https://hdlbits.01xz.net/wiki/Vector1</p> <p>\u8ddf\u4e0a\u984c\u5927\u540c\u5c0f\u7570\uff0c<code>assign {out_hi,out_lo} = in;</code>\u7b49\u50f9\u65bc<code>assign out_hi = in[15:8]; assign out_lo = in[7:0];</code>\u3002 Verilog<pre><code>`default_nettype none     // Disable implicit nets. Reduces some types of bugs.\nmodule top_module( input wire [15:0] in,\noutput wire [7:0] out_hi,\noutput wire [7:0] out_lo );\nassign {out_hi,out_lo} = in;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#vector-part-select","title":"Vector part select","text":"<p>Website: https://hdlbits.01xz.net/wiki/Vector2</p> <p>\u8ddf\u4e0a\u984c\u5927\u540c\u5c0f\u7570\uff0c<code>assign out = {in[7:0],in[15:8],in[23:16],in[31:24]};</code>\u7b49\u50f9\u65bc<code>assign out[31:24] = in[ 7: 0]; assign out[23:16] = in[15: 8]; assign out[15: 8] = in[23:16]; assign out[ 7: 0] = in[31:24];</code>\u3002 Verilog<pre><code>module top_module( input [31:0] in,\noutput [31:0] out );\nassign out = {in[7:0],in[15:8],in[23:16],in[31:24]};\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#bitwise-operators","title":"Bitwise operators","text":"<p>Website: https://hdlbits.01xz.net/wiki/Vectorgates</p> <p>\u9019\u984c\u4e3b\u8981\u8b1b\u8ff0bitwise operators\u548clogical operators\u7684\u5dee\u7570\u3002\u50cf\u8aaabitwise or\u7684\u7b26\u865f\u70ba<code>|</code>\uff0clogical or\u7684\u7b26\u865f\u70ba<code>||</code>\uff0cbitwise not\u7684\u7b26\u865f\u70ba<code>~</code>\uff0clogical not\u7684\u7b26\u865f\u70ba<code>!</code>\u3002\u9019\u984c\u7684not\u662fbitwise not\uff0c\u4e0d\u8981\u5f04\u6df7\u4e86\u3002 Verilog<pre><code>module top_module( input [2:0] a,\ninput [2:0] b,\noutput [2:0] out_or_bitwise,\noutput out_or_logical,\noutput [5:0] out_not\n);\nassign out_or_bitwise = a | b;\nassign out_or_logical = a || b;\nassign out_not = ~ {b,a};\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#four-input-gates","title":"Four-input gates","text":"<p>Website: https://hdlbits.01xz.net/wiki/Gates4</p> <p>\u9019\u984c\u5728\u8907\u7fd2\u5404\u7a2egate\u7684\u7528\u6cd5\u3002 Verilog<pre><code>module top_module( input [3:0] in,\noutput out_and,\noutput out_or,\noutput out_xor\n);\nassign out_and = in[3] &amp; in[2] &amp; in[1] &amp; in[0];\nassign out_or = in[3] | in[2] | in[1] | in[0];\nassign out_xor = in[3] ^ in[2] ^ in[1] ^ in[0];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#vector-concatenation-operator","title":"Vector concatenation operator","text":"<p>Website: https://hdlbits.01xz.net/wiki/Vector3</p> <p>\u9019\u984c\u5728\u6559concatenation\u7684\u6982\u5ff5\uff0c\u7136\u5f8c\u56e0\u70ba\u984c\u76ee\u8981\u6c42\u8981padding11\u5728\u6700\u53f3\u908a2bits\uff0c\u6240\u4ee5\u8981\u52a0\u4e0a2'b11\u3002 Verilog<pre><code>module top_module (\ninput [4:0] a, b, c, d, e, f,\noutput [7:0] w, x, y, z );//\nassign {w,x,y,z} = {a,b,c,d,e,f,2'b11};\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#vector-reversal-1","title":"Vector reversal 1","text":"<p>Website: https://hdlbits.01xz.net/wiki/Vectorr</p> <p>\u9019\u984c\u7576\u7136\u80fd\u7528concatenation\u7684\u6982\u5ff5\u5b8c\u6210\uff0c\u7576\u7136\u5982\u679c\u60f3\u5beb\u500b\u985e\u4f3cfor loop\u7684\u65b9\u6cd5\u9023\u7dda\uff0c\u53ef\u4ee5\u53c3\u8003generate\u8a9e\u6cd5\u3002 Verilog<pre><code>module top_module( input [7:0] in,\noutput [7:0] out\n);\ngenerate\ngenvar i;\nfor (i=0; i&lt;8; i = i+1) begin: my_block_name\nassign out[i] = in[8-i-1];\nend\nendgenerate\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#replication-operator","title":"Replication operator","text":"<p>Website: https://hdlbits.01xz.net/wiki/Vector4</p> <p>\u9019\u984c\u5c078bit\u8f49\u621032bit\uff0c\u4e26\u4e14\u591a\u9918\u768424bit\u8981\u586b\u5165in[7]\uff0c\u6240\u4ee5\u8a9e\u6cd5\u5982\u4e0b\u3002 Verilog<pre><code>module top_module (\ninput [7:0] in,\noutput [31:0] out );//\nassign out = { { 24{ in[7] } },in};\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#more-replication","title":"More replication","text":"<p>Website: https://hdlbits.01xz.net/wiki/Vector5</p> <p>\u9019\u984c\u4e5f\u662f\u7df4\u7fd2replication\uff0caaaaabbbbbcccccdddddeeeee\u53ef\u4ee5\u5beb\u6210<code>{ {5{a}},{5{b}},{5{c}},{5{d}},{5{e}}}</code>\uff0cabcdeabcdeabcdeabcdeabcde\u53ef\u4ee5\u5beb\u6210<code>{5{a,b,c,d,e}}</code>\u3002 Verilog<pre><code>module top_module (\ninput a, b, c, d, e,\noutput [24:0] out );//\nassign out = ~({ { 5{a} },{5{b}},{5{c}},{5{d}},{5{e}}} ^ {5{a,b,c,d,e}});\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#modules-hierarchy","title":"Modules: Hierarchy","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#modules","title":"Modules","text":"<p>Website: https://hdlbits.01xz.net/wiki/Module</p> <p>\u9019\u984c\u5728\u6559\u5982\u4f55\u5f15\u7528module\u3002 Verilog<pre><code>module top_module ( input a, input b, output out );\nmod_a moda(.out(out),.in1(a),.in2(b));\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#connecting-ports-by-position","title":"Connecting ports by position","text":"<p>Website: https://hdlbits.01xz.net/wiki/Module_pos</p> <p>\u9019\u984c\u8ddf\u4e0a\u984c\u5dee\u4e0d\u591a\uff0c\u984c\u76ee\u8981\u6c42\u6211\u5011\u7167\u8457argument\u7684\u4f4d\u7f6e\u63a5\u7dda\u3002 Verilog<pre><code>module top_module ( input a, input b, input c,\ninput d,\noutput out1,\noutput out2\n);\nmodule mod_a ( out1, out2, a, b, c, d );\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#connecting-ports-by-name","title":"Connecting ports by name","text":"<p>Website: https://hdlbits.01xz.net/wiki/Module_name</p> <p>\u9019\u984c\u8ddf\u4e0a\u984c\u5dee\u4e0d\u591a\uff0c\u53ea\u662f\u4e0a\u984c\u662f\u8981\u6c42\u6839\u64daargument\u7684\u4f4d\u7f6e\u63a5\u7dda\uff0c\u9019\u984c\u662f\u8981\u6c42\u8ddf\u64daargument\u7684\u540d\u5b57\u63a5\u7dda\u3002 Verilog<pre><code>module top_module ( input a, input b, input c,\ninput d,\noutput out1,\noutput out2\n);\nmod_a moda(.out1(out1), .out2(out2), .in1(a), .in2(b), .in3(c), .in4(d));\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#three-modules","title":"Three modules","text":"<p>Website: https://hdlbits.01xz.net/wiki/Module_shift</p> <p>\u9019\u984c\u662f\u7df4\u7fd2\u7528\u63a5\u7dda\u7684\u65b9\u5f0f\uff0c\u5c073\u500bdff\u4e32\u63a5\u5728\u4e00\u8d77\u3002 Verilog<pre><code>module top_module ( input clk, input d, output q );\nwire q1,q2;\nmy_dff dff1( .clk(clk), .d(d), .q(q1));\nmy_dff dff2( .clk(clk), .d(q1), .q(q2));\nmy_dff dff3( .clk(clk), .d(q2), .q(q));\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#modules-and-vectors","title":"Modules and vectors","text":"<p>Website: https://hdlbits.01xz.net/wiki/Module_shift8</p> <p>\u9019\u984c\u8ddf\u4e0a\u984c\u5dee\u4e0d\u591a\uff0c\u53ea\u662f\u5f8c\u9762\u591a\u63a5\u4e86\u4e00\u500bmultiplexer\u3002\u800cmultiplexer\u53ef\u4ee5\u7528always block\u5be6\u73fe\uff0c\u901f\u5ea6\u6703\u6bd4\u7528if else\u9084\u5feb\uff0c\u800c\u56e0\u70bamultiplexer\u662fcombinational logic\uff0c\u6240\u4ee5\u8981\u7528blocking assignments\u3002 Verilog<pre><code>module top_module ( input clk, input [7:0] d, input [1:0] sel, output [7:0] q );\nwire [7:0]q1,q2,q3;\nmy_dff8 dff1( .clk(clk), .d(d), .q(q1));\nmy_dff8 dff2( .clk(clk), .d(q1), .q(q2));\nmy_dff8 dff3( .clk(clk), .d(q2), .q(q3));\nalways @(*)\ncase(sel)\n2'b00: q = d;\n2'b01: q = q1;\n2'b10: q = q2;\n2'b11: q = q3;\nendcase\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#adder-1","title":"Adder 1","text":"<p>Website: https://hdlbits.01xz.net/wiki/Module_add</p> <p>\u9019\u984c\u55ae\u7d14\u628a\u5169\u500b16bit adder\u63a5\u5728\u4e00\u8d77\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679cargument\u4e0d\u60f3\u63a5\u7dda\uff0c\u76f4\u63a5\u7559\u7a7a\u5c31\u884c\u4e86\u3002 Verilog<pre><code>module top_module(\ninput [31:0] a,\ninput [31:0] b,\noutput [31:0] sum\n);\nwire c1;\nadd16 add_1( .a(a[15:0]), .b(b[15:0]), .cin(1'b0), .sum(sum[15:0]), .cout(c1));\nadd16 add_2( .a(a[31:16]), .b(b[31:16]), .cin(c1), .sum(sum[31:16]), .cout());\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#adder-2","title":"Adder 2","text":"<p>Website: https://hdlbits.01xz.net/wiki/Module_fadd</p> <p>\u9019\u984c\u8ddf\u4e0a\u984c\u5dee\u4e0d\u591a\uff0c\u53ea\u662f\u8981\u591a\u5beb\u4e00\u500b1 bit full adder\uff0c\u53ef\u4ee5\u7528concatenation\u4f86\u5be6\u73fe\u3002 Verilog<pre><code>module top_module (\ninput [31:0] a,\ninput [31:0] b,\noutput [31:0] sum\n);//\nwire c1;\nadd16 add_1( .a(a[15:0]), .b(b[15:0]), .cin(1'b0), .sum(sum[15:0]), .cout(c1));\nadd16 add_2( .a(a[31:16]), .b(b[31:16]), .cin(c1), .sum(sum[31:16]), .cout());\nendmodule\nmodule add1 ( input a, input b, input cin,   output sum, output cout );\nassign {cout, sum} = a + b + cin;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#carry-select-adder","title":"Carry-select adder","text":"<p>Website: https://hdlbits.01xz.net/wiki/Module_cseladd</p> <p>\u9019\u984c\u8981\u6211\u5011\u63a5\u7ddaCSA(carry-select adder)\uff0cCSA\u7684\u597d\u8655\u5728\u65bc\u5df2\u7d93\u5077\u7b97\u5b8ccin\u662f0\u548c1\u7684case\uff0c\u7b49\u5230\u4f4e\u4f4d\u5143\u9032\u4f4d\u5f8c\uff0c\u5c31\u80fd\u99ac\u4e0a\u7528multiplexer\u8f38\u51fa\u7b97\u597d\u7684\u7d50\u679c\uff0c\u7f3a\u9ede\u5c31\u662f\u56e0\u70ba\u540c\u6642\u8981\u7b97cin\u662f0\u548c1\u7684\u7d50\u679c\uff0c\u9762\u7a4d\u6703\u8b8a\u5169\u500d\u3002 Verilog<pre><code>module top_module(\ninput [31:0] a,\ninput [31:0] b,\noutput [31:0] sum\n);  wire sel;\nwire [15:0] s1,s2;\nadd16 add1( .a(a[15:0]), .b(b[15:0]), .cin(1'b0), .sum(sum[15:0]), .cout(sel));\nadd16 add2( .a(a[31:16]), .b(b[31:16]), .cin(1'b0), .sum(s1), .cout());\nadd16 add3( .a(a[31:16]), .b(b[31:16]), .cin(1'b1), .sum(s2), .cout());\nalways @(*)\ncase(sel)\n1'b0: sum[31:16] = s1;\n1'b1: sum[31:16] = s2;\nendcase\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#adder-subtractor","title":"Adder-subtractor","text":"<p>Website: https://hdlbits.01xz.net/wiki/Module_addsub</p> <p>\u9019\u984c\u5728\u6559\u5982\u4f55\u5feb\u901f\u5be6\u73fe\u6e1b\u6cd5\uff0c\u4e5f\u5c31\u662f<code>a - b = a + ~(b) + 1</code>\u9019\u4ef6\u4e8b\u3002 Verilog<pre><code>module top_module(\ninput [31:0] a,\ninput [31:0] b,\ninput sub,\noutput [31:0] sum\n);\nwire c1;\nwire [31:0] b_xor;\nassign b_xor = b ^ {32{sub}};\nadd16 add_1( .a(a[15:0]), .b(b_xor[15:0]), .cin(sub), .sum(sum[15:0]), .cout(c1));\nadd16 add_2( .a(a[31:16]), .b(b_xor[31:16]), .cin(c1), .sum(sum[31:16]), .cout());\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#procedures","title":"Procedures","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#always-blocks-combinational","title":"Always blocks (combinational)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Alwaysblock1</p> <p>\u9019\u984c\u5728\u8b1b\u8aaacombinational logic\u53ef\u4ee5\u6709assign\u548calways @(*)\u5169\u7a2e\u5beb\u6cd5\u3002\u7136\u5f8c\u6709\u500b\u7d30\u7bc0\u8981\u6ce8\u610f\uff0cassign\u7684\u5de6\u503c\u8981\u7528wire\uff0calways\u7684\u5de6\u503c\u8981\u7528reg\uff0c\u96d6\u7136\u9019\u5169\u8005\u5728\u5408\u6210\u96fb\u8def\u5f8c\u6c92\u5dee\u3002 Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module(\ninput a, input b,\noutput wire out_assign,\noutput reg out_alwaysblock\n);\nassign out_assign = a &amp; b;\nalways @(*)\nout_alwaysblock = a &amp; b;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#always-blocks-clocked","title":"Always blocks (clocked)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Alwaysblock2</p> <p>\u9019\u984c\u5c31\u662f\u5728\u8b1bcombinational logic\u548csequential logic\u7684\u5dee\u5225\u3002\u5982\u679c\u662fclock always\u7684\u8a71\uff0c\u6700\u597d\u8ce6\u503c\u4f7f\u7528non-blocking\u3002 Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module(\ninput clk,\ninput a,\ninput b,\noutput wire out_assign,\noutput reg out_always_comb,\noutput reg out_always_ff   );\nassign out_assign = a ^ b;\nalways@(*)\nout_always_comb = a ^ b;\nalways@(posedge clk)\nout_always_ff &lt;= a ^ b;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#if-statement","title":"If statement","text":"<p>Website: https://hdlbits.01xz.net/wiki/Always_if</p> <p>\u9019\u984c\u5206\u5225\u8981\u6c42\u8981\u5beb\u4e09\u5143\u904b\u7b97\u548c\u5728combinational block\u4e2d\u5bebif/else\uff0c\u53ef\u80fd\u8981\u6ce8\u610f\u7684\u662fcond\u53ef\u4ee5\u5171\u7528\u3002 Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module(\ninput a,\ninput b,\ninput sel_b1,\ninput sel_b2,\noutput wire out_assign,\noutput reg out_always   ); wire cond;\nassign cond = sel_b1 &amp; sel_b2;\nassign out_assign = cond ? b : a;\nalways@(*)begin\nif(cond)begin\nout_always = b;\nend\nelse begin\nout_always = a;\nend\nend endmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#if-statement-latches","title":"If statement latches","text":"<p>Website: https://hdlbits.01xz.net/wiki/Always_if2</p> <p>\u9019\u984c\u5728\u8b1b\u8aaa\u8981\u5beb\u6e05\u695aelse\u548cdefault\uff0c\u4e0d\u7136verilog\u6703\u5408\u6210\u51falatch\u3002 Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module (\ninput      cpu_overheated,\noutput reg shut_off_computer,\ninput      arrived,\ninput      gas_tank_empty,\noutput reg keep_driving  ); //\nalways @(*) begin\nif (cpu_overheated)\nshut_off_computer = 1;\nelse\nshut_off_computer = 0;\nend\nalways @(*) begin\nif (~arrived)\nkeep_driving = ~gas_tank_empty;\nelse\nkeep_driving = 1'b0;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#case-statement","title":"Case statement","text":"<p>Website: https://hdlbits.01xz.net/wiki/Always_case</p> <p>\u9019\u984c\u5728\u6559case\u5982\u4f55\u4f7f\u7528\uff0c\u7136\u5f8c\u8981\u8a18\u5f97\u5bebdefault\u9632\u6b62latch\u3002 Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module ( input [2:0] sel, input [3:0] data0,\ninput [3:0] data1,\ninput [3:0] data2,\ninput [3:0] data3,\ninput [3:0] data4,\ninput [3:0] data5,\noutput reg [3:0] out   );//\nalways@(*) begin  // This is a combinational circuit\ncase(sel)\n3'b000: out = data0;\n3'b001: out = data1;\n3'b010: out = data2;\n3'b011: out = data3;\n3'b100: out = data4;\n3'b101: out = data5;\ndefault: out = 4'b0000;\nendcase\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#priority-encoder","title":"Priority encoder","text":"<p>Website: https://hdlbits.01xz.net/wiki/Always_case2</p> <p>\u9019\u984c\u8981\u5beb\u4e00\u500bencoder\uff0c\u6211\u770b\u4e86\u5361\u8afe\u5716\u5f8c\uff0c\u767c\u73fe\u7528if else\u6216\u5361\u8afe\u5716\u756b\u7684\u6c92\u4ec0\u9ebc\u592a\u5927\u7684\u5dee\u7570\uff0c\u5361\u8afe\u5716\u7684gate level\u5c11\u4e86\u4e00\u9ede\uff0c\u4f46\u662fgate\u591a\u4e86\u4e00\u4e9b\uff0c\u6240\u4ee5\u9019\u984c\u7df4\u7fd2\u7528if else\u5beb\u3002 Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module (\ninput [3:0] in,\noutput reg [1:0] pos  );\nalways@(*)begin\nif(in[0]) pos = 2'b00;\nelse if(in[1]) pos = 2'b01;\nelse if(in[2]) pos = 2'b10;\nelse if(in[3]) pos = 2'b11;\nelse pos= 2'b00;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#priority-encoder-with-casez","title":"Priority encoder with casez","text":"<p>Website: https://hdlbits.01xz.net/wiki/Always_casez</p> <p>\u9019\u984c\u8ddf\u4e0a\u984c\u5dee\u4e0d\u591a\uff0c\u53ea\u662f\u5617\u8a66\u7528casez\u5be6\u4f5cencoder\u3002 Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module (\ninput [7:0] in,\noutput reg [2:0] pos );\nalways@(*)begin\ncasez(in)\n8'bzzzzzzz1: pos = 3'b000;\n8'bzzzzzz10: pos = 3'b001;\n8'bzzzzz100: pos = 3'b010;\n8'bzzzz1000: pos = 3'b011;\n8'bzzz10000: pos = 3'b100;\n8'bzz100000: pos = 3'b101;\n8'bz1000000: pos = 3'b110;\n8'b10000000: pos = 3'b111;\ndefault:     pos = 3'b000;\nendcase\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#avoiding-latches","title":"Avoiding latches","text":"<p>Website: https://hdlbits.01xz.net/wiki/Always_nolatches</p> <p>\u9019\u984c\u5728\u7df4\u7fd2\u5982\u4f55\u5728\u6709\u5927\u91cfoutput\u60c5\u5f62\u6642\uff0c\u900f\u904e\u9810\u5148\u5beb\u9ed8\u8a8d\u7684\u8f38\u5165\u4f86\u6e1b\u5c11\u884c\u6578\uff0c\u800c\u9019\u7a2e\u5beb\u6cd5\u5c0d\u65bc\u5408\u6210\u96fb\u8def\u6c92\u4ec0\u9ebc\u5f71\u97ff\uff0c\u56e0\u70ba\u5be6\u969b\u7684\u96fb\u8def\u4e0d\u662f\u7167\u8457\u7a0b\u5f0f\u78bc\u4e00\u884c\u4e00\u884c\u57f7\u884c\u3002 Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module (\ninput [15:0] scancode,\noutput reg left,\noutput reg down,\noutput reg right,\noutput reg up  ); always@(*)begin\nup = 1'b0;\ndown = 1'b0;\nleft = 1'b0;\nright =1'b0;\ncase(scancode)\n16'he06b: left= 1'b1;\n16'he072: down= 1'b1;\n16'he074: right= 1'b1;\n16'he075: up= 1'b1;\nendcase\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#more-verilog-features","title":"More Verilog Features","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#conditional-ternary-operator","title":"Conditional ternary operator","text":"<p>Website: https://hdlbits.01xz.net/wiki/Conditional</p> <p>\u9019\u984c\u5728\u6559\u4e09\u5143\u904b\u7b97\u7684\u4f7f\u7528\u3002\u984c\u76ee\u8aaa\u8981\u505a\u4e00\u500b4-to-1 MUX\uff0c\u53ef\u4ee5\u7c21\u55ae\u75283\u500b2\u5143\u904b\u7b97\u63a5\u51fa\u96fb\u8def\u3002 Verilog<pre><code>module top_module (\ninput [7:0] a, b, c, d,\noutput [7:0] min);//\n// assign intermediate_result1 = compare? true: false;\nwire [7:0]w1,w2;\nassign w1 = (a&lt;b)? a : b;\nassign w2 = (c&lt;d)? c : d;\nassign min = (w1&lt;w2)? w1 : w2;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#reduction-operators","title":"Reduction operators","text":"<p>Website: https://hdlbits.01xz.net/wiki/Reduction</p> <p>\u9019\u984c\u7df4\u7fd2reduction operator\uff0c\u900f\u904e<code>assign parity =^in</code>\uff0c\u7701\u53bb\u4e86\u5197\u9577\u7684in\u904b\u7b97\u3002 Verilog<pre><code>module top_module (\ninput [7:0] in,\noutput parity); assign parity = ^in;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#reduction-even-wider-gates","title":"Reduction: Even wider gates","text":"<p>Website: https://hdlbits.01xz.net/wiki/Gates100</p> <p>\u9019\u984c\u8ddf\u4e0a\u984c\u5dee\u4e0d\u591a\uff0c\u53ea\u662f\u4f4d\u6578\u8b8a\u591a\u4e86\u3002 Verilog<pre><code>module top_module( input [99:0] in,\noutput out_and,\noutput out_or,\noutput out_xor );\nassign out_and = &amp;in;\nassign out_or = |in;\nassign out_xor = ^in;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#combinational-for-loop-vector-reversal-2","title":"Combinational for-loop: Vector reversal 2","text":"<p>Website: https://hdlbits.01xz.net/wiki/Vector100r</p> <p>\u9019\u984c\u6559\u7a0b\u63a8\u85a6\u7528always block\u4f86\u5be6\u4f5creversal\uff0c\u5c31\u53ef\u4ee5\u4e0d\u7528\u5bebgenerate\u4e86\u3002 Verilog<pre><code>module top_module( input [99:0] in,\noutput [99:0] out\n);\ninteger i;\nalways@(*)begin\nfor(i=0;i&lt;100;i++)begin\nout[i] = in[99-i];\nend\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#combinational-for-loop-255-bit-population-count","title":"Combinational for-loop: 255-bit population count","text":"<p>Website: https://hdlbits.01xz.net/wiki/Popcount255</p> <p>\u9019\u984c\u8981\u7b97\u9663\u5217\u4e2d\u5143\u7d20\u7684\u6578\u91cf\uff0c\u53ef\u4ee5\u7528for loop\u4f86\u5be6\u73fe\uff0c\u7136\u5f8c\u8a18\u5f97out\u8981\u521d\u59cb\u5316\u70ba0\u3002 Verilog<pre><code>module top_module( input [254:0] in,\noutput [7:0] out );\ninteger i;\nalways@(*)begin\nout = 8'b00000000;\nfor(i=0;i&lt;255;i++)begin\nout = out + in[i];\nend\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#generate-for-loop-100-bit-binary-adder-2","title":"Generate for-loop: 100-bit binary adder 2","text":"<p>Website: https://hdlbits.01xz.net/wiki/Adder100i</p> <p>\u9019\u984c\u5728\u7df4\u7fd2100bit\u7684\u52a0\u6cd5\uff0c\u56e0\u70ba\u984c\u76ee\u8981\u6c42\u7528module\u5be6\u4f5c1bit full adder\uff0c\u6240\u4ee5\u9019\u88e1\u53ea\u80fd\u7528generate\u521d\u59cb\u5316\u3002 Verilog<pre><code>module top_module( input [99:0] a, b,\ninput cin,\noutput [99:0] cout,\noutput [99:0] sum );\nfull_adder fa_first(.a(a[0]),.b(b[0]),.cin(cin),.cout(cout[0]),.sum(sum[0]));\ngenvar i;\ngenerate\nfor(i=1;i&lt;100;i++)begin: block_name\nfull_adder fa(.a(a[i]),.b(b[i]),.cin(cout[i-1]),.cout(cout[i]),.sum(sum[i]));\nend\nendgenerate\nendmodule\nmodule full_adder(input a,input b,input cin,output cout,output sum);\nassign {cout,sum} = a + b + cin;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#generate-for-loop-100-digit-bcd-adder","title":"Generate for-loop: 100-digit BCD adder","text":"<p>Website: https://hdlbits.01xz.net/wiki/Bcdadd100</p> <p>\u9019\u984c\u8ddf\u4e0a\u984c\u5dee\u4e0d\u591a\uff0c\u53ea\u662f\u5c07adder\u8b8a\u6210\u4e86BCD-adder\u3002 Verilog<pre><code>module top_module( input [399:0] a, b,\ninput cin,\noutput cout,\noutput [399:0] sum );\nwire [99:0]w;\nassign cout = w[99];\nbcd_fadd bcd_fadd_first(.a(a[3:0]),.b(b[3:0]),.cin(cin),.cout(w[0]),.sum(sum[3:0]));\ngenvar i;\ngenerate\nfor(i=1;i&lt;100;i++)begin:block_bcd\nbcd_fadd bf(.a(a[4*i+3:4*i]),.b(b[4*i+3:4*i]),.cin(w[i-1]),.cout(w[i]),.sum(sum[4*i+3:4*i]));\nend\nendgenerate\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#circuits","title":"Circuits","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#combinational-logic","title":"Combinational Logic","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#basic-gates","title":"Basic Gates","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#wire","title":"Wire","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/m2014_q4h</p> <p>\u9019\u984c\u5c31\u55ae\u7d14\u63a5\u7dda\u3002 Verilog<pre><code>module top_module (\ninput in,\noutput out);\nassign out = in;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#gnd","title":"GND","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/m2014_q4i</p> <p>\u9019\u984c\u5c31\u55ae\u7d14\u63a5\u7dda\u3002 Verilog<pre><code>module top_module (\noutput out);\nassign out = 1'b0;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#nor","title":"NOR","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/m2014_q4e</p> <p>\u9019\u984c\u5c31\u55ae\u7d14\u63a5\u7dda\u3002 Verilog<pre><code>module top_module (\ninput in1,\ninput in2,\noutput out);\nassign out = ~ (in1 | in2);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#another-gate","title":"Another gate","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/m2014_q4f</p> <p>\u9019\u984c\u5c31\u55ae\u7d14\u63a5\u7dda\u3002 Verilog<pre><code>module top_module (\ninput in1,\ninput in2,\noutput out);\nassign out = in1 &amp; (~in2);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#two-gates","title":"Two gates","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/m2014_q4g</p> <p>\u9019\u984c\u5c31\u55ae\u7d14\u63a5\u7dda\u3002 Verilog<pre><code>module top_module (\ninput in1,\ninput in2,\ninput in3,\noutput out);\nassign out = (~(in1 ^ in2))^ in3;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#more-logic-gates","title":"More logic gates","text":"<p>Website: https://hdlbits.01xz.net/wiki/Gates</p> <p>\u9019\u984c\u8003\u5404\u7a2egate\u7684\u904b\u7b97\u3002 Verilog<pre><code>module top_module( input a, b,\noutput out_and,\noutput out_or,\noutput out_xor,\noutput out_nand,\noutput out_nor,\noutput out_xnor,\noutput out_anotb\n);\nassign out_and   = a &amp; b;\nassign out_or    = a | b;\nassign out_xor   = a ^ b;\nassign out_nand  = ~(a &amp; b);\nassign out_nor   = ~(a | b);\nassign out_xnor  = ~(a ^ b);\nassign out_anotb = a &amp; (~b);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#7420-chip","title":"7420 chip","text":"<p>Website: https://hdlbits.01xz.net/wiki/7420</p> <p>\u9019\u984c\u8003\u7a0d\u5fae\u8907\u96dc\u7684\u63a5\u7dda\u3002 Verilog<pre><code>module top_module ( input p1a, p1b, p1c, p1d,\noutput p1y,\ninput p2a, p2b, p2c, p2d,\noutput p2y );\nassign p1y = ~(p1a &amp; p1b &amp; p1c &amp; p1d);\nassign p2y = ~(p2a &amp; p2b &amp; p2c &amp; p2d);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#truth-tables","title":"Truth tables","text":"<p>Website: https://hdlbits.01xz.net/wiki/Truthtable1</p> <p>\u9019\u984c\u7d66\u4e86\u771f\u503c\u8868\uff0c\u53ef\u4ee5\u9032\u4e00\u6b65\u4f7f\u7528\u5361\u8afe\u5716\u5316\u7c21\u3002 Verilog<pre><code>module top_module( input x3,\ninput x2,\ninput x1,  // three inputs\noutput f   // one output\n);\nassign f = (x3 &amp; x1) | ((~x3) &amp; x2);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#two-bit-equality","title":"Two-bit equality","text":"<p>Website: https://hdlbits.01xz.net/wiki/Mt2015_eq2</p> <p>\u9019\u984c\u7528\u4e09\u5143\u904b\u7b97\u5b50\u5c31\u80fd\u89e3\u6c7a\u3002 Verilog<pre><code>module top_module ( input [1:0] A, input [1:0] B, output z ); assign z = (A == B)? 1'b1: 1'b0;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#simple-circuit-a","title":"Simple circuit A","text":"<p>Website: https://hdlbits.01xz.net/wiki/Mt2015_q4a</p> <p>\u9019\u984c\u7167\u984c\u76eeassign\u5c31\u884c\uff0c\u5982\u679c\u5f9e\u985e\u6bd4\u5c64\u9762\u4f86\u770b\uff0cnot gate\u6703\u6bd4and\uff0cor\uff0cxor\u9084\u5c0f\uff0c\u5f37\u70c8\u63a8\u85a6\u591a\u5316\u7c21\u6210not gate\u3002 Verilog<pre><code>module top_module (input x, input y, output z);\nassign  z = x &amp; (~y);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#simple-circuit-b","title":"Simple circuit B","text":"<p>Website: https://hdlbits.01xz.net/wiki/Mt2015_q4b</p> <p>\u9019\u984c\u900f\u904e\u89c0\u5bdf\u6ce2\u5f62\uff0c\u5beb\u51fa\u7d44\u5408\u908f\u8f2f\u3002 Verilog<pre><code>module top_module ( input x, input y, output z );\nassign z = ~(x ^ y);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#combine-circuits-a-and-b","title":"Combine circuits A and B","text":"<p>Website: https://hdlbits.01xz.net/wiki/Mt2015_q4</p> <p>\u9019\u984c\u53ea\u662f\u5c07\u4e0a\u5169\u984c\u7576\u4f5c\u7576\u4f5csubmodule\u5f8c\u63a5\u7dda\u3002 Verilog<pre><code>module top_module (input x, input y, output z);\nwire wa1,wa2,wb1,wb2;\nA IA1(.x(x), .y(y), .z(wa1));\nA IA2(.x(x), .y(y), .z(wa2));\nB IB1(.x(x), .y(y), .z(wb1));\nB IB2(.x(x), .y(y), .z(wb2));\nassign z = ( wa1 | wb1 ) ^ ( wa2  &amp; wb2 );\nendmodule\nmodule A (input x, input y, output z);\nassign  z = x &amp; (~y);\nendmodule\nmodule B ( input x, input y, output z );\nassign z = ~(x ^ y);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#ring-or-vibrate","title":"Ring or vibrate?","text":"<p>Website: https://hdlbits.01xz.net/wiki/Ringer</p> <p>\u9019\u984c\u984c\u76ee\u8981\u6c42\u7528gate\u5beb\u51fa\u7b26\u5408\u6558\u8ff0\u7684\u908f\u8f2f\u3002 Verilog<pre><code>module top_module (\ninput ring,\ninput vibrate_mode,\noutput ringer,       // Make sound\noutput motor         // Vibrate\n);\nassign motor = ring &amp; vibrate_mode;\nassign ringer = ring &amp; (~vibrate_mode);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#thermostat","title":"Thermostat","text":"<p>Website: https://hdlbits.01xz.net/wiki/Thermostat</p> <p>\u9019\u984c\u8ddf\u4e0a\u984c\u5dee\u4e0d\u591a\uff0c\u5c31\u662f\u7167\u8457\u689d\u4ef6\u63a5\u51fa\u5c0d\u61c9\u7684\u96fb\u8def\u3002 Verilog<pre><code>module top_module (\ninput too_cold,\ninput too_hot,\ninput mode,\ninput fan_on,\noutput heater,\noutput aircon,\noutput fan\n); assign heater = mode &amp; too_cold;\nassign aircon = (~mode) &amp; too_hot;\nassign fan = heater | aircon | fan_on;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#3-bit-population-count","title":"3-bit population count","text":"<p>Website: https://hdlbits.01xz.net/wiki/Popcount3</p> <p>\u9019\u984c\u5c31\u662f\u5beb\u500b\u5168\u52a0\u5668\u3002 Verilog<pre><code>module top_module( input [2:0] in,\noutput [1:0] out );\nassign out = in[2] + in[1] + in[0];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#gates-and-vectors","title":"Gates and vectors","text":"<p>Website: https://hdlbits.01xz.net/wiki/Gatesv</p> <p>\u9019\u984c\u5c31\u662f\u7df4\u7fd2assign\u4e00\u6392\u904b\u7b97\u3002 Verilog<pre><code>module top_module( input [3:0] in,\noutput [2:0] out_both,\noutput [3:1] out_any,\noutput [3:0] out_different );\nassign out_both = in[2:0] &amp; in[3:1];\nassign out_any = in[2:0] | in[3:1];\nassign out_different = in [3:0] ^ {in[0],in[3:1]};\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#even-longer-vectors","title":"Even longer vectors","text":"<p>Website: https://hdlbits.01xz.net/wiki/Gatesv100</p> <p>\u9019\u984c\u8ddf\u4e0a\u984c\u5dee\u4e0d\u591a\uff0c\u53ea\u662finput vector\u8b8a\u9577\u4e86\u3002 Verilog<pre><code>module top_module( input [99:0] in,\noutput [98:0] out_both,\noutput [99:1] out_any,\noutput [99:0] out_different );\nassign out_both = in[98:0] &amp; in[99:1];\nassign out_any = in[98:0] | in[99:1];\nassign out_different = in [99:0] ^ {in[0],in[99:1]};\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#multiplexers","title":"Multiplexers","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#2-to-1-multiplexer","title":"2-to-1 multiplexer","text":"<p>Website: https://hdlbits.01xz.net/wiki/Mux2to1</p> <p>\u7528\u4e09\u5143\u904b\u7b97\u5b50\u5c31\u80fd\u8f15\u9b06\u5beb\u51famultiplexer\u3002 Verilog<pre><code>module top_module( input a, b, sel,\noutput out ); assign out = sel? b: a;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#2-to-1-bus-multiplexer","title":"2-to-1 bus multiplexer","text":"<p>Website: https://hdlbits.01xz.net/wiki/Mux2to1v</p> <p>\u8ddf\u4e0a\u984c\u5dee\u4e0d\u591a\uff0c\u7528\u4e09\u5143\u904b\u7b97\u5b50\u5c31\u80fd\u8f15\u9b06\u5beb\u51favector\u7684multiplexer\u3002 Verilog<pre><code>module top_module( input [99:0] a, b,\ninput sel,\noutput [99:0] out );\nassign out = sel ? b : a;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#9-to-1-multiplexer","title":"9-to-1 multiplexer","text":"<p>Website: https://hdlbits.01xz.net/wiki/Mux9to1v</p> <p>\u9019\u984c\u53ef\u4ee5\u7528case\u4f86\u5be6\u73fe9-to-1 multiplexer\u3002 Verilog<pre><code>module top_module( input [15:0] a, b, c, d, e, f, g, h, i,\ninput [3:0] sel,\noutput [15:0] out );\nalways@(*)begin\ncase(sel)\n4'b0000: out = a;\n4'b0001: out = b;\n4'b0010: out = c;\n4'b0011: out = d;\n4'b0100: out = e;\n4'b0101: out = f;\n4'b0110: out = g;\n4'b0111: out = h;\n4'b1000: out = i;\ndefault: out = {16{1'b1}};\nendcase\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#256-to-1-multiplexer","title":"256-to-1 multiplexer","text":"<p>Website: https://hdlbits.01xz.net/wiki/Mux256to1</p> <p>\u9019\u984c\u8b1b\u8ff0sel\u4e5f\u53ef\u4ee5\u653e\u5728index\u7684\u4f4d\u7f6e\u3002 Verilog<pre><code>module top_module( input [255:0] in,\ninput [7:0] sel,\noutput out );\nassign out = in[sel];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#256-to-1-4-bit-multiplexer","title":"256-to-1 4-bit multiplexer","text":"<p>Website: https://hdlbits.01xz.net/wiki/Mux256to1v</p> <p>\u984c\u76ee\u8b1b\u8aaa<code>assign out = in[4*sel+3 :4*sel];</code>\u6703\u7de8\u4e0d\u904e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6539\u5beb\u6210<code>assign out = in[4*sel +:4];</code>\uff0c\u5f9e4*sel\u7684\u5730\u65b9\u5f80\u4e0a\u53d64\u4f4d\u3002 Verilog<pre><code>module top_module( input [1023:0] in,\ninput [7:0] sel,\noutput [3:0] out );\nassign out = in[4*sel +:4];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#arithmetic-circuits","title":"Arithmetic Circuits","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#half-adder","title":"Half adder","text":"<p>Website: https://hdlbits.01xz.net/wiki/Hadd</p> <p>\u9019\u984c\u5c31\u662f\u5beb\u4e00\u500b\u534a\u52a0\u5668\u3002 Verilog<pre><code>module top_module( input a, b,\noutput cout, sum );\nassign cout = a &amp; b;\nassign sum = a ^ b;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#full-adder","title":"Full adder","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fadd</p> <p>\u9019\u984c\u5c31\u662f\u5beb\u4e00\u500b\u5168\u52a0\u5668\u3002 Verilog<pre><code>module top_module( input a, b, cin,\noutput cout, sum );\nassign {cout,sum} = a + b + cin;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#3-bit-binary-adder","title":"3-bit binary adder","text":"<p>Website: https://hdlbits.01xz.net/wiki/Adder3</p> <p>\u9019\u984c\u5c31\u662f\u5c073\u500b\u5168\u52a0\u5668\u4e32\u5728\u4e00\u8d77\u3002 Verilog<pre><code>module top_module( input [2:0] a, b,\ninput cin,\noutput [2:0] cout,\noutput [2:0] sum );\nFA FA1(.a(a[0]),.b(b[0]),.cin(cin),.cout(cout[0]),.sum(sum[0]));\nFA FA2(.a(a[1]),.b(b[1]),.cin(cout[0]),.cout(cout[1]),.sum(sum[1]));\nFA FA3(.a(a[2]),.b(b[2]),.cin(cout[1]),.cout(cout[2]),.sum(sum[2]));\nendmodule\nmodule FA( input a, b, cin,\noutput cout, sum );\nassign {cout,sum} = a + b + cin;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#adder","title":"Adder","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/m2014_q4j</p> <p>\u9019\u984c\u5c31\u662f\u5c074\u500b\u5168\u52a0\u5668\u4e32\u5728\u4e00\u8d77\uff0c\u9806\u4fbf\u7df4\u7fd2\u7528generate block\u5beb\u4e86for loop\u3002 Verilog<pre><code>module top_module (\ninput [3:0] x,\ninput [3:0] y, output [4:0] sum);\nwire [4:1]cout;\nassign sum[4] = cout[4];\nFA FAA(.a(x[0]),.b(y[0]),.cin(1'b0),.cout(cout[1]),.sum(sum[0]));\ngenvar i;\ngenerate\nfor(i=1;i&lt;4;i++)begin:block\nFA FAA(.a(x[i]),.b(y[i]),.cin(cout[i]),.cout(cout[i+1]),.sum(sum[i]));\nend\nendgenerate\nendmodule\nmodule FA( input a, b, cin,\noutput cout, sum );\nassign {cout,sum} = a + b + cin;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#signed-addition-overflow","title":"Signed addition overflow","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q1c</p> <p>\u9019\u984c\u55ae\u7d14\u7df4\u7fd2overflow\u7684\u5224\u5225\uff0c\u4e5f\u5c31\u662f\u5169\u6b63\u6578\u76f8\u52a0\u6216\u5169\u8ca0\u6578\u76f8\u6e1b\u6642\uff0c\u5206\u5225\u5f97\u5230\u8ca0\u6578\u548c\u6b63\u6578\uff0c\u90a3\u5c31\u662f\u767c\u751foverflow\u3002 Verilog<pre><code>module top_module (\ninput [7:0] a,\ninput [7:0] b,\noutput [7:0] s,\noutput overflow\n);\nassign s = a + b;\nassign overflow = (a[7]&amp;b[7]&amp;(~s[7])) | ((~a[7])&amp;(~b[7])&amp;s[7]);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#100-bit-binary-adder","title":"100-bit binary adder","text":"<p>Website: https://hdlbits.01xz.net/wiki/Adder100</p> <p>\u9019\u984c\u5728\u7df4\u7fd2\u5982\u4f55\u7528behavioural code\u63cf\u8ff0\u96fb\u8def\u3002 Verilog<pre><code>module top_module( input [99:0] a, b,\ninput cin,\noutput cout,\noutput [99:0] sum );\nassign {cout,sum} = a + b + cin;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#4-digit-bcd-adder","title":"4-digit BCD adder","text":"<p>Website: https://hdlbits.01xz.net/wiki/Bcdadd4</p> <p>\u9019\u984c\u5728\u7df4\u7fd2\u4e32\u63a5BCD adder\u3002 Verilog<pre><code>module top_module ( input [15:0] a, b,\ninput cin,\noutput cout,\noutput [15:0] sum );\nwire [3:0] co;\nbcd_fadd bf1(.a(a[3:0]),.b(b[3:0]),.cin(cin),.cout(co[0]),.sum(sum[3:0]));\nbcd_fadd bf2(.a(a[7:4]),.b(b[7:4]),.cin(co[0]),.cout(co[1]),.sum(sum[7:4]));\nbcd_fadd bf3(.a(a[11:8]),.b(b[11:8]),.cin(co[1]),.cout(co[2]),.sum(sum[11:8]));\nbcd_fadd bf4(.a(a[15:12]),.b(b[15:12]),.cin(co[2]),.cout(co[3]),.sum(sum[15:12]));\nassign cout = co[3];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#karnaugh-map-to-circuit","title":"Karnaugh Map to Circuit","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#3-variable","title":"3-variable","text":"<p>Website: https://hdlbits.01xz.net/wiki/Kmap1</p> <p>\u9019\u984c\u7df4\u7fd2\u5982\u4f55\u5316\u7c21k-map\u3002 Verilog<pre><code>module top_module(\ninput a,\ninput b,\ninput c,\noutput out  ); assign out = a | b | c;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#4-variable1","title":"4-variable(1)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Kmap2</p> <p>\u9019\u984c\u7df4\u7fd2\u5982\u4f55\u5316\u7c21k-map\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0ck map\u756b\u5708\u8981\u91cd\u758a\uff0c\u624d\u4e0d\u6703\u767c\u751fhazard\u3002 Verilog<pre><code>module top_module(\ninput a,\ninput b,\ninput c,\ninput d,\noutput out  ); assign out = (~a &amp; ~d) | (~b &amp; ~c) | (a &amp; ~b &amp; d) | (a &amp; c &amp; d) | (b &amp; c &amp; d);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#4-variable2","title":"4-variable(2)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Kmap3</p> <p>\u9019\u984c\u7df4\u7fd2\u5982\u4f55\u5316\u7c21k-map\uff0cdon't care\u7684\u90e8\u5206\u53ef\u4ee5\u65e2\u770b\u62100\u6216\u770b\u62101\u5316\u7c21\uff0c\u5c31\u770b\u65b9\u4fbf\u5316\u7c21\u3002 Verilog<pre><code>module top_module(\ninput a,\ninput b,\ninput c,\ninput d,\noutput out  ); assign out = a | (~b &amp; c);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#4-variable3","title":"4-variable(3)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Kmap4</p> <p>\u9019\u984c\u7df4\u7fd2\u5982\u4f55\u5316\u7c21k-map\uff0c\u6709\u9ede\u8166\u7b4b\u6025\u8f49\u5f4e\uff0c\u9019\u984c\u53cd\u800c\u4e0d\u80fd\u60f3\u7528sum of product\u6216product of sum\u3002 Verilog<pre><code>module top_module(\ninput a,\ninput b,\ninput c,\ninput d,\noutput out  ); assign out = a ^ b ^ c ^ d;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#minimum-sop-and-pos","title":"Minimum SOP and POS","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/ece241_2013_q2</p> <p>\u9019\u984c\u7df4\u7fd2\u5982\u4f55\u756bk map\u4e26\u5316\u7c21\u3002 Verilog<pre><code>module top_module (\ninput a,\ninput b,\ninput c,\ninput d,\noutput out_sop,\noutput out_pos\n);\n//K map\n//cd\\ab 00 01 11 10\n//   00  0  0  d  d  \n//   01  0  0  0  0\n//   11  d  1  1  d\n//   10  1  0  0  0\nassign out_sop = (c &amp; d) | (~a &amp; ~b &amp; c);\nassign out_pos = c &amp; (~a | b) &amp; (~b | d);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#karnaugh-map1","title":"Karnaugh map(1)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/m2014_q3</p> <p>\u9019\u984c\u7df4\u7fd2\u5982\u4f55\u756bk map\u4e26\u5316\u7c21\u3002 Verilog<pre><code>module top_module (\ninput [4:1] x, output f );\nassign f = (~x[1] &amp; x[3]) | (x[2] &amp; x[4]);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#karnaugh-map2","title":"Karnaugh map(2)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/2012_q1g</p> <p>\u9019\u984c\u7df4\u7fd2\u5982\u4f55\u756bk map\u4e26\u5316\u7c21\u3002 Verilog<pre><code>module top_module (\ninput [4:1] x,\noutput f\n); assign f = (~x[2] &amp; ~x[4])|(~x[1] &amp; x[3])|(x[2] &amp; x[3] &amp; x[4]);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#k-map-implemented-with-a-multiplexer","title":"K-map implemented with a multiplexer","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q3</p> <p>\u9019\u984c\u7df4\u7fd2\u5982\u4f55\u756bk map\u4e26\u5316\u7c21\uff0c\u6bd4\u8f03\u6709\u610f\u601d\u7684\u662f\uff0c\u9019\u984c\u7528\u5230\u4e86multiplexer\u756bk-map\u3002 Verilog<pre><code>module top_module (\ninput c,\ninput d,\noutput [3:0] mux_in\n); assign mux_in[0] = c | d;\nassign mux_in[1] =  1'b0;\nassign mux_in[2] =    ~d;\nassign mux_in[3] = c &amp; d;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#sequential-logic","title":"Sequential Logic","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#latches-and-flip-flops","title":"Latches and Flip-Flops","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#d-flip-flop","title":"D flip-flop","text":"<p>Website: https://hdlbits.01xz.net/wiki/Dff</p> <p>\u9019\u984c\u55ae\u7d14\u7df4\u7fd2\u5982\u4f55\u7528sequential block\u5efa\u7acbDFF\uff0c\u6ce8\u610f\u8981\u7528non-blocking assignment\u3002 Verilog<pre><code>module top_module (\ninput clk,    // Clocks are used in sequential circuits\ninput d,\noutput reg q );//\n// Use a clocked always block\n//   copy d to q at every positive edge of clk\n//   Clocked always blocks should use non-blocking assignments\nalways@(posedge clk)\nq &lt;= d;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#d-flip-flops","title":"D flip-flops","text":"<p>Website: https://hdlbits.01xz.net/wiki/Dff8</p> <p>\u9019\u984c\u55ae\u7d14\u7df4\u7fd2\u5982\u4f55\u7528sequential block\u5efa\u7acb8-bit input DFF\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput [7:0] d,\noutput reg [7:0] q\n);\nalways@(posedge clk)\nq &lt;= d;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#dff-with-reset","title":"DFF with reset","text":"<p>Website: https://hdlbits.01xz.net/wiki/Dff8r</p> <p>\u9019\u984c\u55ae\u7d14\u7df4\u7fd2\u5982\u4f55\u7528sequential block\u5efa\u7acb8-bit input with DFF synchronous reset\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,            // Synchronous reset\ninput [7:0] d,\noutput reg [7:0] q\n);\nalways@(posedge clk)begin\nif(reset) q &lt;= 8'b0000_0000;\nelse q &lt;= d;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#dff-with-reset-value","title":"DFF with reset value","text":"<p>Website: https://hdlbits.01xz.net/wiki/Dff8p</p> <p>\u9019\u984c\u7df4\u7fd2\u8ca0\u7de3\u66f4\u65b0\uff0c\u7136\u5f8c\u984c\u76ee\u6240\u8aaa\u5728reset\u6642\u8981\u66f4\u65b0\u62100x34\uff0c0x\u7684\u610f\u601d\u662f16\u9032\u4f4d\u5236\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,\ninput [7:0] d,\noutput reg [7:0] q\n);\nalways@(negedge clk)begin\nif(reset) q &lt;= 8'h34;\nelse q &lt;= d;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#dff-with-asynchronous-reset","title":"DFF with asynchronous reset","text":"<p>Website: https://hdlbits.01xz.net/wiki/Dff8ar</p> <p>\u9019\u984c\u8981\u505a\u7570\u6b65\u5fa9\u4f4d\u7684DFF\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput areset,   // active high asynchronous reset\ninput [7:0] d,\noutput reg [7:0] q\n);\nalways@(posedge clk, posedge areset)begin\nif(areset) q &lt;= 8'b0000_0000;\nelse q &lt;= d;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#dff-with-byte-enable","title":"DFF with byte enable","text":"<p>Website: https://hdlbits.01xz.net/wiki/Dff16e</p> <p>\u9019\u984c\u5c31\u662fDFF\u52a0\u4e0aenable\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput resetn,\ninput [1:0] byteena,\ninput [15:0] d,\noutput reg[15:0] q\n);\nalways@(posedge clk)begin\nif(~resetn) q &lt;= 16'h0000;\nelse begin\nq[15:8] &lt;= byteena[1] ? d[15:8]: q[15:8];\nq[7:0] &lt;= byteena[0] ? d[7:0]: q[7:0];\nend\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#d-latch","title":"D Latch","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/m2014_q4a</p> <p>\u9019\u984c\u7df4\u7fd2\u5bebd latch\uff0c\u56e0\u70bad latch\u662flevel-sensitive\uff0c\u6240\u4ee5\u8981\u7528<code>always@(*)</code>\uff0c\u800c\u56e0\u70ba\u662fsequential logic\uff0c\u6240\u4ee5\u8981\u7528non-blocking assignment\u3002 Verilog<pre><code>module top_module (\ninput d, input ena,\noutput reg q);\nalways@(*)begin\nif(ena) q &lt;= d;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#dff1","title":"DFF(1)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/m2014_q4b</p> <p>\u9019\u984c\u7df4\u7fd2\u5bebDFF with asynchronous reset\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput d, input ar,   // asynchronous reset\noutput reg q);\nalways@(posedge clk,posedge ar)begin\nif(ar) q &lt;= 1'b0;\nelse q &lt;= d;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#dff2","title":"DFF(2)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/m2014_q4c</p> <p>\u9019\u984c\u7df4\u7fd2\u5bebDFF with synchronous reset\uff0c\u8ddf\u4e0a\u984c\u4e0d\u540c\u7684\u662f\uff0c\u4e0d\u7528\u8003\u616ereset\u7684\u6b63\u7de3\u89f8\u767c\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput d, input r,   // synchronous reset\noutput reg q);\nalways@(posedge clk)begin\nif(r) q &lt;= 1'b0;\nelse q &lt;= d;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#dffgate","title":"DFF+gate","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/m2014_q4d</p> <p>\u9019\u984c\u7df4\u7fd2\u5bebDFF\u52a0\u4e0agate\u7684\u586b\u5beb\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput in, output reg out);\nalways@(posedge clk)begin\nout &lt;= out ^ in;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#mux-and-dff1","title":"Mux and DFF(1)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Mt2015_muxdff</p> <p>\u9019\u984c\u7df4\u7fd2\u4e00\u500bDFF\u52a0\u4e0a\u4e00\u500bmux\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput L,\ninput r_in,\ninput q_in,\noutput reg Q);\nalways@(posedge clk)begin\nQ &lt;= L ? r_in : q_in;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#mux-and-dff2","title":"Mux and DFF(2)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/2014_q4a</p> <p>\u9019\u984c\u7df4\u7fd2\u4e00\u500bDFF\u52a0\u4e0a\u8d85\u904e1\u500bgate\uff0c\u6b64\u6642\u5c31\u53ef\u4ee5\u8003\u616e\u5c07combinational logic\u53e6\u5916\u5728sequential block\u5916assign\u597d\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput w, R, E, L,\noutput reg Q\n);  wire q_in;\nassign q_in = L ? R : (E ? w : Q);\nalways@(posedge clk)begin\nQ &lt;= q_in;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#dffs-and-gates","title":"DFFs and gates","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q4</p> <p>\u9019\u984c\u53ea\u662f\u5beb3\u500bDFF\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput x,\noutput z\n); reg q1,q2,q3;\nassign z = ~(q1 | q2 | q3);\nalways@(posedge clk)begin\nq1 &lt;= q1 ^ x;\nq2 &lt;= ~q2 &amp; x;\nq3 &lt;= ~q3 | x;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#create-circuit-from-truth-table","title":"Create circuit from truth table","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/ece241_2013_q7</p> <p>\u9019\u984c\u7df4\u7fd2\u5bebJK-FF\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput j,\ninput k,\noutput reg Q); always @(posedge clk)begin\ncase({j,k})\n2'b00: Q &lt;= Q;\n2'b01: Q &lt;= 1'b0;\n2'b10: Q &lt;= 1'b1;\n2'b11: Q &lt;= ~Q;\nendcase\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#detect-an-edge","title":"Detect an edge","text":"<p>Website: https://hdlbits.01xz.net/wiki/Edgedetect</p> <p>\u9019\u984c\u7df4\u7fd2\u5bebedge detection\uff0c\u70ba\u4e86\u6bd4\u8f03\u4e0a\u500bclk\u7684\u8f38\u5165\uff0c\u8981\u591a\u958b\u4e00\u500bdff\u5b58\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput [7:0] in,\noutput reg [7:0] pedge\n);\nreg [7:0] in_prev;\nalways@(posedge clk)begin\nin_prev &lt;= in;\npedge &lt;= ~in_prev &amp; in;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#detect-both-edges","title":"Detect both edges","text":"<p>Website: https://hdlbits.01xz.net/wiki/Edgedetect2</p> <p>\u9019\u984c\u7df4\u7fd2\u5bebedge detection\uff0c\u8ddf\u4e0a\u984c\u4e0d\u540c\u7684\u662f\uff0c\u8981\u540c\u6642\u5224\u65b70\u8b8a1\u548c1\u8b8a0\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput [7:0] in,\noutput reg [7:0] anyedge\n);\nreg [7:0] in_prev;\nalways@(posedge clk)begin\nin_prev &lt;= in;\nanyedge &lt;= in ^ in_prev;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#edge-capture-register","title":"Edge capture register","text":"<p>Website: https://hdlbits.01xz.net/wiki/Edgecapture</p> <p>\u9019\u984c\u6700\u96e3\u7684\u5730\u65b9\u5c31\u662f\u5c07edge detection\u8b8a\u6210edge capture\uff0c\u6700\u7c21\u55ae\u7684\u505a\u6cd5\u5c31\u662f\u591aor\u4e0a\u56de\u5408\u7684output\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,\ninput [31:0] in,\noutput reg [31:0] out\n);\nreg [31:0] in_prev;\nalways@(posedge clk)begin\nin_prev &lt;= in;\nif(reset)\nout &lt;= 32'h0000_0000;\nelse begin\nout &lt;= ~in &amp; in_prev | out;\nend\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#dual-edge-triggered-flip-flop","title":"Dual-edge triggered flip-flop","text":"<p>Website: https://hdlbits.01xz.net/wiki/Dualedge</p> <p>\u9019\u984c\u6211\u76f4\u63a5\u67e5\u89e3\u7b54\uff0c\u9019\u500b\u96fb\u8def\u8a2d\u8a08\u4e5f\u592a\u9177\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput d,\noutput q\n);\n// Why does this work? \n// After posedge clk, p changes to d^n. Thus q = (p^n) = (d^n^n) = d.\n// After negedge clk, n changes to p^n. Thus q = (p^n) = (p^d^p) = d.\nreg r1, r2;\nassign q = r1 ^ r2;\nalways@(posedge clk) r1 &lt;= r2 ^ d;\nalways@(negedge clk) r2 &lt;= r1 ^ d;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#counters","title":"Counters","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#four-bit-binary-counter","title":"Four-bit binary counter","text":"<p>Website: https://hdlbits.01xz.net/wiki/Count15</p> <p>\u9019\u984c\u5c31\u662f\u7528always\u4f86\u8a08\u6578\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,      // Synchronous active-high reset\noutput reg[3:0] q);\nalways@(posedge clk)begin\nif(reset) q &lt;= 4'b0000;\nelse q&lt;= q + 4'b0001;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#decade-counter","title":"Decade counter","text":"<p>Website: https://hdlbits.01xz.net/wiki/Count10</p> <p>\u9019\u984c\u5c31\u662f\u7528always\u4f86\u8a08\u6578\uff0c\u53ea\u662f\u6578\u52309\uff0c\u591a\u4e00\u500b\u689d\u4ef6\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,        // Synchronous active-high reset\noutput reg[3:0] q);\nalways@(posedge clk)begin\nif(reset) q &lt;= 4'b0000;\nelse if(q == 4'b1001) q &lt;= 4'b0000;\nelse q&lt;= q + 4'b0001;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#decade-counter-again","title":"Decade counter again","text":"<p>Website: https://hdlbits.01xz.net/wiki/Count1to10</p> <p>\u9019\u984c\u5c31\u662f\u7528always\u4f86\u8a08\u6578\uff0c\u53ea\u662f\u8b8a\u6210\u5f9e1\u6578\u523010\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,\noutput reg[3:0] q);\nalways@(posedge clk)begin\nif(reset) q &lt;=4'b0001;\nelse if(q == 4'b1010) q&lt;=4'b0001;\nelse q &lt;= q + 4'b0001;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#slow-decade-counter","title":"Slow decade counter","text":"<p>Website: https://hdlbits.01xz.net/wiki/Countslow</p> <p>\u9019\u984c\u8ddf\u4e0a\u984c\u5dee\u4e0d\u591a\uff0c\u53ea\u662f\u8b8a\u6210\u7528\u53e6\u4e00\u500b\u8f38\u5165\u8a08\u6578\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput slowena,\ninput reset,\noutput reg[3:0] q);\nalways@(posedge clk)begin\nif(reset) q &lt;= 4'b0000;\nelse if(slowena)begin\nif(q == 4'b1001) q&lt;= 4'b0000;\nelse q &lt;= q + 4'b0001;\nend\nelse q &lt;= q;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#counter-1-12","title":"Counter 1-12","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q7a</p> <p>\u9019\u984c\u7d66\u4e86\u5b8c\u6574\u7684\u8a08\u6578\u5668\uff0c\u7136\u5f8c\u8981\u6c42\u5916\u63a5\u63a7\u5236reset\u548c\u6578\u523012\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,\ninput enable,\noutput [3:0] Q,\noutput c_enable,\noutput c_load,\noutput [3:0] c_d\n); //\nassign c_enable = enable;\nassign c_load = reset | (enable &amp; (Q == 4'b1100));\nassign c_d = 4'b0001;\ncount4 the_counter (clk, c_enable, c_load, c_d ,Q);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#counter-1000","title":"Counter 1000","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q7b</p> <p>\u9019\u984c\u7d66\u4e86BCD counter\uff0c\u7136\u5f8c\u8981\u9023\u7e8c\u63a53\u500bBCD counter\u6578\u52301000\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,\noutput OneHertz,\noutput [2:0] c_enable\n); //\nwire [3:0] one, ten, hundred;\nwire is_ten, is_hundred;\nassign is_ten = (one == 4'b1001);\nassign is_hundred = is_ten &amp; (ten == 4'b1001);\nassign c_enable = {is_hundred,is_ten,1'b1};\nassign OneHertz = is_hundred &amp; (hundred == 4'b1001);\nbcdcount counter0 (clk, reset, c_enable[0], one);\nbcdcount counter1 (clk, reset, c_enable[1], ten);\nbcdcount counter2 (clk, reset, c_enable[2], hundred);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#4-digit-decimal-counter","title":"4-digit decimal counter","text":"<p>Website: https://hdlbits.01xz.net/wiki/Countbcd</p> <p>\u9019\u984c\u8981\u81ea\u5df1\u523b\u4e00\u500bBCD\uff0c\u7136\u5f8c\u8981\u5c074\u500bBCD\u76f8\u63a5\uff0c\u6578\u52309999\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,   // Synchronous active-high reset\noutput [3:1] ena,\noutput [15:0] q);\nwire is_ten , is_hundred, is_thousand;\nassign is_ten = (q[3:0] == 4'b1001);\nassign is_hundred = (q[7:4] == 4'b1001) &amp; is_ten;\nassign is_thousand = (q[11:8] == 4'b1001) &amp; is_hundred &amp; is_ten;\nassign ena = {is_thousand, is_hundred, is_ten};\nBCD BCD0(.clk(clk),.reset(reset),.enable( 1'b1 ),.q(q[3:0]));\nBCD BCD1(.clk(clk),.reset(reset),.enable(ena[1]),.q(q[7:4]));\nBCD BCD2(.clk(clk),.reset(reset),.enable(ena[2]),.q(q[11:8]));\nBCD BCD3(.clk(clk),.reset(reset),.enable(ena[3]),.q(q[15:12]));\nendmodule\nmodule BCD(\ninput clk,\ninput reset,\ninput enable,\noutput reg [4:0] q);\nalways@(posedge clk)begin\nif(reset) q &lt;= 4'b0000;\nelse if(enable)begin\nif(q == 4'b1001) q &lt;= 4'b0000;\nelse q &lt;= q + 4'b0001;\nend\nelse q &lt;= q;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#12-hour-clock","title":"12-hour clock","text":"<p>Website: https://hdlbits.01xz.net/wiki/Count_clock</p> <p>\u9019\u984c\u523b\u4e00\u500b\u6642\u9418\uff0c\u7b97\u662f\u76ee\u524d\u5237\u984c\u7b2c\u4e00\u6b21\u8981\u5beb\u5f88\u591a\u7a0b\u5f0f\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput reset,\ninput ena,\noutput pm,\noutput [7:0] hh,\noutput [7:0] mm,\noutput [7:0] ss);\nwire enas2,enam1,enam2,enah1,enah2,enapm,ld;\nBCD_zero_to_nine s1( .clk(clk), .reset(reset), .enable(ena), .q(ss[3:0]));\nassign enas2 = ena &amp; (ss[3:0] == 4'b1001);\nBCD_zero_to_six s2( .clk(clk), .reset(reset), .enable(enas2), .q(ss[7:4]));\nassign enam1 = enas2 &amp; (ss[7:4] == 4'b0101);\nBCD_zero_to_nine m1( .clk(clk), .reset(reset), .enable(enam1), .q(mm[3:0]));\nassign enam2 = enam1 &amp; (mm[3:0] == 4'b1001);\nBCD_zero_to_six m2( .clk(clk), .reset(reset), .enable(enam2), .q(mm[7:4]));    assign enah1 = enam2 &amp; (mm[7:4] == 4'b0101);\nassign ld = enah1 &amp; (hh == 8'b0001_0010);    BCD_zero_to_nine_wload h1( .clk(clk), .reset(reset), .enable(enah1), .load(ld), .q(hh[3:0]));\nassign enah2 = (enah1 &amp; (hh[3:0] == 4'b1001)) | ld;\nBCD_zero_to_one_wload h2( .clk(clk), .reset(reset), .enable(enah2), .load(ld), .q(hh[7:4]));\nassign enapm = enah1 &amp; (hh == 8'b0001_0001);\nPM is_pm( .clk(clk), .reset(reset), .enable(enapm), .pm(pm));\nendmodule\nmodule BCD_zero_to_nine(\ninput clk,\ninput reset,\ninput enable,\noutput reg [3:0]q);\nalways@(posedge clk)begin\nif(reset) q &lt;= 4'b0000;\nelse if(enable)begin\nif(q == 4'b1001) q &lt;= 4'b0000;\nelse q &lt;= q + 4'b0001;\nend\nelse q &lt;= q;\nend\nendmodule\nmodule BCD_zero_to_six(\ninput clk,\ninput reset,\ninput enable,\noutput reg [3:0]q);\nalways@(posedge clk)begin\nif(reset) q &lt;= 4'b0000;\nelse if(enable)begin\nif(q == 4'b0101) q &lt;= 4'b0000;\nelse q &lt;= q + 4'b0001;\nend\nelse q &lt;= q;\nend\nendmodule\nmodule BCD_zero_to_nine_wload(\ninput clk,\ninput reset,\ninput enable,\ninput load,\noutput reg [3:0]q);\nalways@(posedge clk)begin\nif(reset) q &lt;= 4'b0010;\nelse if(enable)begin\nif(load) q &lt;= 4'b0001;\nelse if(q == 4'b1001) q &lt;= 4'b0000;\nelse q &lt;= q + 4'b0001;\nend\nelse q &lt;= q;\nend\nendmodule\nmodule BCD_zero_to_one_wload(\ninput clk,\ninput reset,\ninput enable,\ninput load,\noutput reg [3:0]q);\nalways@(posedge clk)begin\nif(reset) q &lt;= 4'b0001;\nelse if(enable)begin\nif(load) q &lt;= 4'b0000;\nelse q &lt;= q + 4'b0001;\nend\nelse q &lt;= q;\nend\nendmodule\nmodule PM(\ninput clk,\ninput reset,\ninput enable,\noutput reg pm);\nalways@(posedge clk)begin\nif(reset) pm &lt;= 1'b0;\nelse if(enable) pm &lt;= pm ^ 1'b1;\nelse pm &lt;= pm;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#shift-registers","title":"Shift Registers","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#4-bit-shift-register","title":"4-bit shift register","text":"<p>Website: https://hdlbits.01xz.net/wiki/Shift4</p> <p>\u9019\u984c\u5c31\u662f\u5beb\u500bshift register\uff0c\u552f\u4e00\u8981\u6ce8\u610f\u7684\u662fload\u512a\u5148\u7d1a\u6bd4enable\u5927\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput areset,  // async active-high reset to zero\ninput load,\ninput ena,\ninput [3:0] data,\noutput reg [3:0] q); always@(posedge clk, posedge areset)begin\nif(areset) q &lt;= 4'b0000;\nelse if(load) q &lt;= data;\nelse if(ena) q &lt;= q &gt;&gt; 1;\nelse q &lt;= q;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#leftright-rotator","title":"Left/right rotator","text":"<p>Website: https://hdlbits.01xz.net/wiki/Rotate100</p> <p>\u9019\u984c\u5c31\u662f\u5beb\u500brotator\uff0c\u53ef\u4ee5\u4f7f\u7528concatenation\u4f86\u5be6\u73ferotate\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput load,\ninput [1:0] ena,\ninput [99:0] data,\noutput reg [99:0] q); always@(posedge clk)begin\nif(load) q &lt;= data;\nelse begin\ncase(ena)\n2'b00: q &lt;= q;\n2'b01: q &lt;= { q[0], q[99:1]};\n2'b10: q &lt;= { q[98:0], q[99]};\n2'b11: q &lt;= q;\nendcase\nend\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#leftright-arithmetic-shift-by-1-or-8","title":"Left/right arithmetic shift by 1 or 8","text":"<p>Website: https://hdlbits.01xz.net/wiki/Shift18</p> <p>\u9019\u984c\u5be6\u4f5carithmetic shift\uff0c\u9700\u6ce8\u610f\u7684\u662farithmetic shift\u5f80\u53f3\u4f4d\u79fb\u6642\uff0c\u9ad8\u4f4d\u8981\u7528\u88dc\u6578\u88dc\u4f4d\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput load,\ninput ena,\ninput [1:0] amount,\ninput [63:0] data,\noutput reg [63:0] q); always@(posedge clk)begin\nif(load) q &lt;= data;\nelse if(ena)begin\ncase(amount)\n2'b00: q &lt;= {q[62:0], 1'b0};\n2'b01: q &lt;= {q[55:0],8'b0000_0000};\n2'b10: q &lt;= {q[63],q[63:1]};\n2'b11: q &lt;= {{8{q[63]}},q[63:8]};\nendcase\nend\nelse q &lt;= q;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#5-bit-lfsr","title":"5-bit LFSR","text":"<p>Website: https://hdlbits.01xz.net/wiki/Lfsr5</p> <p>\u9019\u984c\u5be6\u4f5cLFSR\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput reset,    // Active-high synchronous reset to 5'h1\noutput reg [4:0] q\n); always@(posedge clk)begin\nif(reset) q &lt;= 5'b00001;\nelse q &lt;= {q[0],q[4],q[3] ^ q[0],q[2:1]};\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#3-bit-lfsr","title":"3-bit LFSR","text":"<p>Website: https://hdlbits.01xz.net/wiki/Mt2015_lfsr</p> <p>\u9019\u984c\u8ddf\u4e0a\u984c\u4e00\u6a23\u5be6\u4f5cLFSR\u3002 Verilog<pre><code>module top_module (\ninput [2:0] SW,      // R\ninput [1:0] KEY,     // L and clk\noutput [2:0] LEDR);  // Q\nalways@(posedge KEY[0])begin\nLEDR &lt;= KEY[1] ? SW: {LEDR[1]^LEDR[2],LEDR[0],LEDR[2]};\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#32-bit-lfsr","title":"32-bit LFSR","text":"<p>Website: https://hdlbits.01xz.net/wiki/Lfsr32</p> <p>\u9019\u984c\u9084\u662f\u5be6\u4f5cLFSR\uff0ctaps\u7684\u610f\u601d\u662f\u6307\u5728\u5c0d\u61c9\u7684output\u653e\u4e0a<code>xor q[0]</code>\uff0c\u50cf\u8aaataps at 1\u610f\u601d\u5c31\u662f<code>q[1] ^ q[0]</code>\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput reset,    // Active-high synchronous reset to 32'h1\noutput reg [31:0] q\n); always@(posedge clk)begin\nif(reset) q &lt;= 32'h1;\nelse q &lt;= {q[0],q[31:23],q[22]^q[0],q[21:3],q[2]^q[0],q[1]^q[0]};\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#shift-register1","title":"Shift register(1)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/m2014_q4k</p> <p>\u9019\u984c\u55ae\u7d14\u7df4\u7fd2pipeline\u600e\u9ebc\u5207\uff0c\u7e3d\u4e4b\u5c31\u662f\u591a\u958b\u5e7e\u500breg\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput resetn,   // synchronous reset\ninput in,\noutput reg out);\nreg q1, q2, q3;\nalways@(posedge clk)begin\nif(~resetn) {q1,q2,q3,out} &lt;= 4'b0000;\nelse {q1,q2,q3,out} &lt;= {in,q1,q2,q3};\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#shift-register2","title":"Shift register(2)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/2014_q4b</p> <p>\u9019\u984c\u55ae\u7d14\u7df4\u7fd2\u5beb\u4e00\u500bmodule\uff0c\u7136\u5f8c\u63a5\u6210pipeline\u3002 Verilog<pre><code>module top_module (\ninput [3:0] SW,\ninput [3:0] KEY,\noutput [3:0] LEDR\n); //\nMUXDFF ff0( .E(KEY[1]), .clk(KEY[0]), .L(KEY[2]), .w(LEDR[1]), .R(SW[0]), .q(LEDR[0]));\nMUXDFF ff1( .E(KEY[1]), .clk(KEY[0]), .L(KEY[2]), .w(LEDR[2]), .R(SW[1]), .q(LEDR[1]));\nMUXDFF ff2( .E(KEY[1]), .clk(KEY[0]), .L(KEY[2]), .w(LEDR[3]), .R(SW[2]), .q(LEDR[2]));\nMUXDFF ff3( .E(KEY[1]), .clk(KEY[0]), .L(KEY[2]), .w(KEY[3]), .R(SW[3]), .q(LEDR[3]));\nendmodule\nmodule MUXDFF (\ninput E,\ninput clk,\ninput L,\ninput w,\ninput R,\noutput q);\nalways@(posedge clk)begin\ncase({L,E})\n2'b00: q &lt;= q;\n2'b01: q &lt;= w;\ndefault: q &lt;= R;\nendcase\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#3-input-lut","title":"3-input LUT","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/ece241_2013_q12</p> <p>\u9019\u984c\u55ae\u7d14\u7df4\u7fd2\u5beb\u4e00\u500bshift register\u548cmultiplexer\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput enable,\ninput S,\ninput A, B, C,\noutput reg Z ); reg [7:0] Q;\nalways@(posedge clk)begin\nif(enable) Q &lt;= {Q[6:0],S};\nelse Q &lt;= Q;\nend\nassign Z = Q[{A,B,C}];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#more-circuits","title":"More Circuits","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#rule-90","title":"Rule 90","text":"<p>Website: https://hdlbits.01xz.net/wiki/Rule90</p> <p>\u9019\u984c\u55ae\u7d14\u7df4\u7fd2concatenation\u7684\u4f7f\u7528\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput load,\ninput [511:0] data,\noutput reg [511:0] q ); always @(posedge clk)begin\nif(load) q &lt;= data;\nelse q &lt;= {1'b0,q[511:1]} ^ {q[510:0],1'b0};\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#rule-110","title":"Rule 110","text":"<p>Website: https://hdlbits.01xz.net/wiki/Rule110</p> <p>\u9019\u984c\u55ae\u7d14\u7df4\u7fd2concatenation\u7684\u4f7f\u7528\uff0c\u8ddf\u4e0a\u984c\u4e0d\u540c\u7684\u662f\uff0c\u9019\u984c\u6709\u9ede\u5361\u8afe\u5716\u5316\u7c21\u7684\u611f\u89ba\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput load,\ninput [511:0] data,\noutput reg [511:0] q\n); always@(posedge clk)begin\nif(load) q &lt;= data;\nelse q &lt;= (q ^ {q[510:0],1'b0}) | (~{1'b0,q[511:1]} &amp; q);\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#conways-game-of-life-16x16","title":"Conway's Game of Life 16x16","text":"<p>Website: https://hdlbits.01xz.net/wiki/Conwaylife</p> <p>\u9019\u984c\u7df4\u7fd2\u4f7f\u7528for\u8ff4\u5708\uff0c\u9084\u6709debug\u7684\u8010\u5fc3\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput load,\ninput [255:0] data,\noutput reg [255:0] q );\nreg [255:0] next_q;\nreg [323:0] q_padding;\nreg [3:0] answer[255:0];\ninteger i,j;\nalways@(*)begin\n//update q_padding\nq_padding[17:0] = {q[240],q[255:240],q[255]};\nq_padding[323:306] = {q[0],q[15:0],q[15]};\nfor(i = 1; i &lt; 17 ; i++)begin\nq_padding[i*18 +: 18] = {q[(i-1)*16],q[(i-1)*16 +: 16],q[i*16-1]};\nend\n//calculate\nfor(i=0; i&lt;16; i++)begin\nfor(j=0; j&lt;16; j++)begin\n//center is q_padding[18*(i+1)+(j+1)]\nanswer[16*i + j] = q_padding[18*i+(j  )] +\nq_padding[18*i+(j+1)] +\nq_padding[18*i+(j+2)] +\nq_padding[18*(i+1)+(j  )] +\nq_padding[18*(i+1)+(j+2)] +\nq_padding[18*(i+2)+(j  )] +\nq_padding[18*(i+2)+(j+1)] +\nq_padding[18*(i+2)+(j+2)];                case(answer[16*i + j])\n4'b0011: next_q[16*i+j] = 1'b1;\n4'b0010: next_q[16*i+j] = q[16*i+j];\ndefault: next_q[16*i+j] = 1'b0;\nendcase\nend\nend\nend\nalways@(posedge clk)begin\nif(load) q &lt;= data;\nelse q &lt;= next_q;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#finite-state-machines","title":"Finite State Machines","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#simple-fsm-1-asynchronous-reset","title":"Simple FSM 1 (asynchronous reset)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fsm1</p> <p>\u9019\u984c\u5beb\u500bFSM\uff0c\u53ef\u4ee5\u9032\u4e00\u6b65\u5316\u7c21\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput areset,    // Asynchronous reset to state B\ninput in,\noutput out);//  \nparameter A=0, B=1; reg state;\nalways @(posedge clk, posedge areset) begin    // This is a sequential always block\n// State flip-flops with asynchronous reset\nif(areset) state &lt;=  B;\nelse begin\nstate &lt;= ~(state ^ in);\nend\nend\n// Output logic\nassign out = state;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#simple-fsm-1-synchronous-reset","title":"Simple FSM 1 (synchronous reset)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fsm1s</p> <p>\u9019\u984c\u5beb\u500bFSM\uff0c\u8ddf\u4e0a\u4e00\u984c\u53ea\u5dee\u5728Synchronous reset\uff0c\u9019\u984c\u7df4\u7fd2\u6b63\u5e38\u5bebFSM\u3002 Verilog<pre><code>// Note the Verilog-1995 module declaration syntax here:\nmodule top_module(clk, reset, in, out);\ninput clk;\ninput reset;    // Synchronous reset to state B\ninput in;\noutput out;\n// Fill in state name declarations\nreg present_state, next_state;\nalways@(*)begin\ncase(present_state)\n1'b0: next_state = in? 1'b0: 1'b1;\n1'b1: next_state = in? 1'b1: 1'b0;\nendcase\nend\nalways @(posedge clk) begin\nif (reset)present_state &lt;= 1'b1;\nelse present_state &lt;= next_state;\nend\nassign out = present_state;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#simple-fsm-2-asynchronous-reset","title":"Simple FSM 2 (asynchronous reset)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fsm2</p> <p>\u9019\u984c\u5beb\u500bFSM\uff0c\u8ddf\u4e0a\u4e0a\u4e00\u984c\u53ea\u5dee\u5728\u908f\u8f2f\u6709\u9ede\u5dee\u7570\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput areset,    // Asynchronous reset to OFF\ninput j,\ninput k,\noutput out); //  \nreg state, next_state;\nalways @(*) begin\n// State transition logic\ncase(state)\n1'b1: next_state = k? 1'b0: 1'b1;\n1'b0: next_state = j? 1'b1: 1'b0;\nendcase\nend\nalways @(posedge clk, posedge areset) begin\n// State flip-flops with asynchronous reset\nif(areset) state &lt;= 1'b0;\nelse state &lt;= next_state;\nend\n// Output logic\nassign out = state;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#simple-fsm-2-synchronous-reset","title":"Simple FSM 2 (synchronous reset)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fsm2s</p> <p>\u9019\u984c\u5beb\u500bFSM\uff0c\u8ddf\u4e0a\u4e00\u984c\u53ea\u5dee\u5728Synchronous reset\uff0c\u9019\u984c\u7df4\u7fd2\u6b63\u5e38\u5bebFSM\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput reset,    // Synchronous reset to OFF\ninput j,\ninput k,\noutput out); //  \nreg state, next_state;\nalways @(*) begin\n// State transition logic\ncase(state)\n1'b1: next_state = k? 1'b0: 1'b1;\n1'b0: next_state = j? 1'b1: 1'b0;\nendcase\nend\nalways @(posedge clk) begin\n// State flip-flops with synchronous reset\nif(reset) state &lt;= 1'b0;\nelse state &lt;= next_state;\nend\n// Output logic\nassign out = state;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#simple-state-transitions-3","title":"Simple state transitions 3","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fsm3comb</p> <p>\u9019\u984c\u5beb\u500bFSM\uff0c\u53ea\u662f\u4e0d\u9700\u8981\u8655\u7406clock\u3002 Verilog<pre><code>module top_module(\ninput in,\ninput [1:0] state,\noutput [1:0] next_state,\noutput out); //\n//parameter A=0, B=1, C=2, D=3;\n// State transition logic: next_state = f(state, in)\nalways@(*)begin\ncase(state)\n2'b00: next_state = in? 2'b01: 2'b00;\n2'b01: next_state = in? 2'b01: 2'b10;\n2'b10: next_state = in? 2'b11: 2'b00;\n2'b11: next_state = in? 2'b01: 2'b10;\nendcase\nend\n// Output logic:  out = f(state) for a Moore state machine\nassign out = &amp;state;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#simple-one-hot-state-transitions-3","title":"Simple one-hot state transitions 3","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fsm3onehot</p> <p>\u9019\u984cstate\u662fone-hot vector\uff0c\u8981\u6c42transition table\u7528assign\u5beb\uff0c\u6eff\u7279\u5225\u7684\u3002 Verilog<pre><code>module top_module(\ninput in,\ninput [3:0] state,\noutput [3:0] next_state,\noutput out); //\nparameter A=0, B=1, C=2, D=3;\n// State transition logic: Derive an equation for each state flip-flop.\nassign next_state[A] = ~in &amp; (state[0] | state[2]);\nassign next_state[B] = in &amp; (state[0] | state[1] | state[3]);\nassign next_state[C] = ~in &amp; (state[1] | state[3]);\nassign next_state[D] = in &amp; (state[2]);\n// Output logic: \nassign out = state[3];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#simple-fsm-3-asynchronous-reset","title":"Simple FSM 3 (asynchronous reset)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fsm3</p> <p>\u9019\u984c\u5bebFSM\uff0c\u7167\u8457\u5beb\u5c31\u7d50\u675f\u4e86\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput in,\ninput areset,\noutput out); //\n// State transition logic\nreg [1:0] state, next_state;\nalways@(*)begin\ncase(state)\n2'b00: next_state = in? 2'b01: 2'b00;\n2'b01: next_state = in? 2'b01: 2'b10;\n2'b10: next_state = in? 2'b11: 2'b00;\n2'b11: next_state = in? 2'b01: 2'b10;\nendcase\nend\n// State flip-flops with asynchronous reset\nalways@(posedge clk, posedge areset)begin\nif(areset) state &lt;= 2'b00;\nelse state &lt;= next_state;\nend\n// Output logic\nassign out = &amp;state;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#simple-fsm-3-synchronous-reset","title":"Simple FSM 3 (synchronous reset)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fsm3s</p> <p>\u9019\u984c\u5bebFSM\uff0c\u7167\u8457\u5beb\u5c31\u7d50\u675f\u4e86\uff0c\u8ddf\u4e0a\u984c\u76f8\u6bd4\uff0c\u5c31\u662f\u628a\u6539\u6210synchronous reset\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput in,\ninput reset,\noutput out); //\n// State transition logic\nreg [1:0] state, next_state;\nalways@(*)begin\ncase(state)\n2'b00: next_state = in? 2'b01: 2'b00;\n2'b01: next_state = in? 2'b01: 2'b10;\n2'b10: next_state = in? 2'b11: 2'b00;\n2'b11: next_state = in? 2'b01: 2'b10;\nendcase\nend\n// State flip-flops with synchronous reset\nalways@(posedge clk)begin\nif(reset) state &lt;= 2'b00;\nelse state &lt;= next_state;\nend\n// Output logic\nassign out = &amp;state;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#design-a-moore-fsm","title":"Design a Moore FSM","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/ece241_2013_q4</p> <p>\u9019\u984c\u8003\u95b1\u8b80\uff0c\u7167\u8457\u984c\u610f\u63a5FSM\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,\ninput [3:1] s,\noutput fr3,\noutput fr2,\noutput fr1,\noutput dfr\n); reg [1:0]state, next_state;\nassign next_state = {s[2],~(s[3]^s[2])&amp;s[1]};\nalways@(posedge clk)begin\nif(reset) state &lt;= 2'b00;\nelse state &lt;= next_state;\nend\nalways@(*)begin\ncase(state)\n2'b00: {fr3,fr2,fr1} = 3'b111;\n2'b01: {fr3,fr2,fr1} = 3'b011;\n2'b10: {fr3,fr2,fr1} = 3'b001;\n2'b11: {fr3,fr2,fr1} = 3'b000;\nendcase\nend\nalways@(posedge clk)begin\nif(reset) dfr &lt;= 1'b1;\nelse begin\nif(state &gt; next_state) dfr &lt;= 1'b1;\nelse if(state== next_state) dfr &lt;= dfr;\nelse dfr &lt;= 1'b0;\nend\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#lemmings-1","title":"Lemmings 1","text":"<p>Website: https://hdlbits.01xz.net/wiki/Lemmings1</p> <p>\u9019\u984c\u900f\u904eFSM\u5be6\u4f5c\u904a\u6232\u7684\u539f\u7406\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput areset,    // Freshly brainwashed Lemmings walk left.\ninput bump_left,\ninput bump_right,\noutput walk_left,\noutput walk_right); //  \n// parameter LEFT=1, RIGHT=0, ...\nreg state, next_state;\nalways @(*) begin\n// State transition logic\ncase(state)\n1'b0: next_state = bump_right? 1'b1: 1'b0;\n1'b1: next_state = bump_left?  1'b0: 1'b1;\nendcase\nend\nalways @(posedge clk, posedge areset) begin\n// State flip-flops with asynchronous reset\nif(areset) state &lt;= 1'b1;\nelse state &lt;= next_state;\nend\n// Output logic\nassign walk_left = state;\nassign walk_right = ~state;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#lemmings-2","title":"Lemmings 2","text":"<p>Website: https://hdlbits.01xz.net/wiki/Lemmings2</p> <p>\u9019\u984c\u662f\u4e0a\u984c\u7684\u5ef6\u4f38\uff0c\u4e3b\u8981\u662fbump\u7684\u689d\u4ef6\u8981\u591a\u5beb\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput areset,    // Freshly brainwashed Lemmings walk left.\ninput bump_left,\ninput bump_right,\ninput ground,\noutput walk_left,\noutput walk_right,\noutput aaah ); //0 right_fall, 1 left_fall, 2 right, 3 left\nreg [1:0]state,next_state;\nalways@(*)begin\nif(~ground) next_state = {1'b0,state[0]};\nelse begin\ncase(state)\n2'b00: next_state = 2'b10;\n2'b01: next_state = 2'b11;\n2'b10: next_state = bump_right? 2'b11: 2'b10;\n2'b11: next_state = bump_left ? 2'b10: 2'b11;\nendcase\nend\nend\nalways@(posedge clk,posedge areset)begin\nif(areset) state &lt;= 2'b11;\nelse state &lt;= next_state;\nend\nassign walk_left = &amp;state;\nassign walk_right = state[1] &amp; ~state[0];\nassign aaah = ~state[1];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#lemmings-3","title":"Lemmings 3","text":"<p>Website: https://hdlbits.01xz.net/wiki/Lemmings3</p> <p>\u9019\u984c\u662f\u4e0a\u984c\u7684\u5ef6\u4f38\uff0c\u4e3b\u8981\u662fdig\u7684\u689d\u4ef6\u8981\u591a\u5beb\uff0c\u7136\u5f8c\u5982\u679c\u7167\u8457fsm\u683c\u5f0f\u5beb\u61c9\u8a72\u6703\u5feb\u6a02\u4e0d\u5c11\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput areset,    // Freshly brainwashed Lemmings walk left.\ninput bump_left,\ninput bump_right,\ninput ground,\ninput dig,\noutput walk_left,\noutput walk_right,\noutput aaah,\noutput digging ); //right 3'b000, left 3'b001, bump right 3'b010, bump left 3'b011, dig right 3'b100, dig left 3'b101\nreg [2:0] state,next_state;\nalways@(*)begin\ncase(state)\n3'b000: next_state= ground? (dig? 3'b100: (bump_right? 3'b001:3'b000)): 3'b010;\n3'b001: next_state= ground? (dig? 3'b101: (bump_left ? 3'b000:3'b001)): 3'b011;\n3'b010: next_state= ground? 3'b000: 3'b010;\n3'b011: next_state= ground? 3'b001: 3'b011;\n3'b100: next_state= ground? 3'b100: 3'b010;\n3'b101: next_state= ground? 3'b101: 3'b011;\ndefault: next_state= 3'bxxx;\nendcase\nend\nalways@(posedge clk,posedge areset)begin\nif(areset) state &lt;= 3'b001;\nelse state &lt;= next_state;\nend\nassign walk_left = ~state[2] &amp; ~state[1] &amp; state[0];\nassign walk_right = &amp;(~state);\nassign aaah = ~state[2] &amp; state[1];\nassign digging = state[2];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#lemmings-4","title":"Lemmings 4","text":"<p>Website: https://hdlbits.01xz.net/wiki/Lemmings4</p> <p>\u9019\u984c\u662f\u4e0a\u984c\u7684\u5ef6\u4f38\uff0c\u4e5f\u662fFSM\u548ccounter\u7684\u7d50\u5408\uff0c\u9019\u88e1\u53ea\u9700\u8981\u6ce8\u610fcounter\u5728sequential\u7684logic\u4e0d\u8981\u5beb\u932f\u4e86\uff0c\u6211\u7576\u6642\u628a<code>if(~next_state[2] &amp; next_state[1])</code>\u5beb\u6210<code>if(~state[2] &amp; state[1])</code>\uff0c\u4e00\u76f4\u5c11\u7b97\u4e00\u56de\u5408\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput areset,    // Freshly brainwashed Lemmings walk left.\ninput bump_left,\ninput bump_right,\ninput ground,\ninput dig,\noutput walk_left,\noutput walk_right,\noutput aaah,\noutput digging ); //right 3'b000, left 3'b001, bump right 3'b010, bump left 3'b011, dig right 3'b100, dig left 3'b101,splatter 3'b110\nreg [2:0] state,next_state;\nreg [7:0] count;\nalways@(*)begin\ncase(state)\n3'b000: next_state= ground? (dig? 3'b100: (bump_right? 3'b001:3'b000)): 3'b010;\n3'b001: next_state= ground? (dig? 3'b101: (bump_left ? 3'b000:3'b001)): 3'b011;\n3'b010: next_state= ground? ((count&gt;8'd20)? 3'b110: 3'b000): 3'b010;\n3'b011: next_state= ground? ((count&gt;8'd20)? 3'b110: 3'b001): 3'b011;\n3'b100: next_state= ground? 3'b100: 3'b010;\n3'b101: next_state= ground? 3'b101: 3'b011;\n3'b110: next_state = 3'b110;\ndefault: next_state= 3'bxxx;\nendcase\nend\nalways@(posedge clk,posedge areset)begin\nif(areset)begin\nstate &lt;= 3'b001;\ncount &lt;= 8'd0;\nend\nelse begin\nstate &lt;= next_state;\nif(~next_state[2] &amp; next_state[1])\ncount &lt;= count + 8'd1;\nelse\ncount &lt;= 8'd0;\nend\nend\nassign walk_left = ~state[2] &amp; ~state[1] &amp; state[0];\nassign walk_right = &amp;(~state);\nassign aaah = ~state[2] &amp; state[1];\nassign digging = state[2] &amp; ~state[1];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#one-hot-fsm","title":"One-hot FSM","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fsm_onehot</p> <p>\u9019\u984c\u4e0d\u7528\u5bebDFF\uff0c\u800c\u4e14\u53c8\u662fone hot vector\uff0c\u6240\u4ee5\u5f88\u9069\u5408\u7528assign\u4f86\u5beb\u5b8ctransition logic\u3002 Verilog<pre><code>module top_module(\ninput in,\ninput [9:0] state,\noutput [9:0] next_state,\noutput out1,\noutput out2);\n//next state\nassign next_state[0] = ~in &amp; (state[0]| state[1]|  state[2]| state[3]|  state[4]| state[7]| state[8]| state[9]);\nassign next_state[1] = in &amp; (state[0]| state[8]| state[9]);\nassign next_state[2] = in &amp; state[1];\nassign next_state[3] = in &amp; state[2];\nassign next_state[4] = in &amp; state[3];\nassign next_state[5] = in &amp; state[4];\nassign next_state[6] = in &amp; state[5];\nassign next_state[7] = in &amp; (state[6]| state[7]);\nassign next_state[8] = ~in &amp; state[5];\nassign next_state[9] = ~in &amp; state[6];\n//out\nassign out1 = state[8]| state[9];\nassign out2 = state[7]| state[9];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#ps2-packet-parser","title":"PS/2 packet parser","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fsm_ps2</p> <p>\u9019\u984c\u6709\u9edeedge detection\u7684\u611f\u89ba\uff0c\u6216\u8a31\u53ef\u4ee5\u958b3\u500breg\u5b58\u524d3\u56de\u5408\u7684\u8f38\u5165\uff0c\u4e0d\u904e\u7528FSM\u53ef\u4ee5\u66f4\u7406\u60f3\u7684\u7701\u7a7a\u9593\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput [7:0] in,\ninput reset,    // Synchronous reset\noutput done); //\n//2'b00 -&gt; reset\n//2'b01 -&gt; get the 1xx\n//2'b11 -&gt; output done = 1\nreg [1:0]state, next_state;\n// State transition logic (combinational)\nalways@(*)begin\ncase(state)\n2'b00: next_state = in[3]? 2'b01: 2'b00;\n2'b01: next_state = 2'b10;\n2'b10: next_state = 2'b11;\n2'b11: next_state = in[3]? 2'b01: 2'b00;\nendcase\nend\n// State flip-flops (sequential)\nalways@(posedge clk)begin\nif(reset) state &lt;= 2'b00;//reset\nelse state &lt;= next_state;\nend\n// Output logic\nassign done = state[1] &amp; state [0];//done when state== 2'b11\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#ps2-packet-parser-and-datapath","title":"PS/2 packet parser and datapath","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fsm_ps2data</p> <p>\u9019\u984c\u5ef6\u7e8c\u4e0a\u984c\uff0c\u5c31\u53ea\u662f\u958b\u500bdatapath\u4f86\u5b58\u904e\u5f80\u8cc7\u6599\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput [7:0] in,\ninput reset,    // Synchronous reset\noutput [23:0] out_bytes,\noutput done); //\n// FSM from fsm_ps2\n//2'b00 -&gt; reset\n//2'b01 -&gt; get the 1xx\n//2'b11 -&gt; output done = 1\nreg [1:0]state, next_state;\n// State transition logic (combinational)\nalways@(*)begin\ncase(state)\n2'b00: next_state = in[3]? 2'b01: 2'b00;\n2'b01: next_state = 2'b10;\n2'b10: next_state = 2'b11;\n2'b11: next_state = in[3]? 2'b01: 2'b00;\nendcase\nend\n// State flip-flops (sequential)\nalways@(posedge clk)begin\nif(reset) state &lt;= 2'b00;//reset\nelse state &lt;= next_state;\nend\n// Output logic\nassign done = state[1] &amp; state [0];//done when state== 2'b11\n// New: Datapath to store incoming bytes.\nreg [7:0] in1, in2, in3;\nalways@(posedge clk)begin\nin1 &lt;= in;\nin2 &lt;= in1;\nin3 &lt;= in2;\nend\nassign out_bytes = done? {in3, in2, in1}: {24{1'b0}};\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#serial-receiver","title":"Serial receiver","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fsm_serial</p> <p>\u9019\u984c\u55ae\u7d14\u8003\u600e\u9ebc\u5c07\u61c9\u7528\u984c\u8f49\u6210FSM\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput in,\ninput reset,    // Synchronous reset\noutput done\n); //data*8 + start + stop + idle + ??? = 12state\nreg[3:0] state, next_state;\nalways@(*)begin\ncase(state)\n4'd0: next_state = in? 4'd0: 4'd1;//idle\n4'd1: next_state = 4'd2;//start\n4'd2: next_state = 4'd3;//data1\n4'd3: next_state = 4'd4;//data2\n4'd4: next_state = 4'd5;//data3\n4'd5: next_state = 4'd6;//data4\n4'd6: next_state = 4'd7;//data5\n4'd7: next_state = 4'd8;//data6\n4'd8: next_state = 4'd9;//data7\n4'd9: next_state = in? 4'd10: 4'd11;//data8\n4'd10: next_state = in? 4'd0: 4'd1;//stop\n4'd11: next_state = in? 4'd0: 4'd11;//???\ndefault: next_state = 4'bxxxx;\nendcase\nend\nassign done = (state == 4'd10);\nalways@(posedge clk)begin\nif(reset) state &lt;= 4'b0000;\nelse state &lt;= next_state;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#serial-receiver-and-datapath","title":"Serial receiver and datapath","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fsm_serialdata</p> <p>\u9019\u984c\u63a5\u7e8c\u4e0a\u984c\uff0c\u591a\u52a0\u4e00\u500bdatapath\u5b58\u8cc7\u6599\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput in,\ninput reset,    // Synchronous reset\noutput [7:0] out_byte,\noutput done\n); //\n// Use FSM from Fsm_serial\n//data*8 + start + stop + idle + ??? = 12state\nreg[3:0] state, next_state;\nalways@(*)begin\ncase(state)\n4'd0: next_state = in? 4'd0: 4'd1;//idle\n4'd1: next_state = 4'd2;//start\n4'd2: next_state = 4'd3;//data1\n4'd3: next_state = 4'd4;//data2\n4'd4: next_state = 4'd5;//data3\n4'd5: next_state = 4'd6;//data4\n4'd6: next_state = 4'd7;//data5\n4'd7: next_state = 4'd8;//data6\n4'd8: next_state = 4'd9;//data7\n4'd9: next_state = in? 4'd10: 4'd11;//data8\n4'd10: next_state = in? 4'd0: 4'd1;//stop\n4'd11: next_state = in? 4'd0: 4'd11;//???\ndefault: next_state = 4'bxxxx;\nendcase\nend\nassign done = (state == 4'd10);\nalways@(posedge clk)begin\nif(reset) state &lt;= 4'b0000;\nelse state &lt;= next_state;\nend\n// New: Datapath to latch input bits.\nreg [8:0] data;\nalways@(posedge clk)begin\ndata &lt;= {in,data[8:1]};\nend\nassign out_byte = data[7:0];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#serial-receiver-with-parity-checking","title":"Serial receiver with parity checking","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fsm_serialdp</p> <p>\u9019\u984c\u63a5\u7e8c\u4e0a\u984c\uff0cdata input\u5f9e8 bit\u8b8a9 bit\uff0c\u6240\u4ee5FSM\u8981\u6539\u3002\u7136\u5f8c\u6709\u500b\u7d30\u7bc0\u8981\u6ce8\u610f\uff0c\u5c31\u662fparity\u7684reset\u7b49\u5230start\u968e\u6bb5\u6642\u4e5f\u8981reset\u3002\u81f3\u65bc\u8aaa\u5982\u4f55\u5224\u5225<code>is_start</code>\uff0c\u9019\u88e1\u5f97\u7528<code>assign is_start = (next_state == 4'd1);</code>\uff0c\u4e0d\u80fd\u7528<code>assign is_start = (state == 4'd1);</code>\u7684\u539f\u56e0\u5728\u65bc\uff0c\u6703\u665a\u4e00\u500bcycle\u3002\u6240\u4ee5\u628a\u63e1\u4e00\u500b\u539f\u5247\uff0csequential logic\u4e2d\u82e5\u7528\u5230\u72c0\u614b\uff0c\u8a18\u5f97\u8981\u5bebnext_state\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput in,\ninput reset,    // Synchronous reset\noutput [7:0] out_byte,\noutput done\n); //\n// Modify FSM and datapath from Fsm_serialdata\n// Use FSM from Fsm_serial\n//data*8 + start + stop + idle + ??? = 12state\nreg[3:0] state, next_state;\nalways@(*)begin\ncase(state)\n4'd0: next_state = in? 4'd0: 4'd1;//idle\n4'd1: next_state = 4'd2;//start\n4'd2: next_state = 4'd3;//data1\n4'd3: next_state = 4'd4;//data2\n4'd4: next_state = 4'd5;//data3\n4'd5: next_state = 4'd6;//data4\n4'd6: next_state = 4'd7;//data5\n4'd7: next_state = 4'd8;//data6\n4'd8: next_state = 4'd9;//data7\n4'd9: next_state = 4'd10;//data8\n4'd10: next_state = in? 4'd11: 4'd12;//data9\n4'd11: next_state = in? 4'd0: 4'd1;//stop\n4'd12: next_state = in? 4'd0: 4'd12;//???\ndefault: next_state = 4'bxxxx;\nendcase\nend\nalways@(posedge clk)begin\nif(reset) state &lt;= 4'b0000;\nelse begin\nstate &lt;= next_state;\nvalid &lt;= odd;\nend\nend\n// New: Datapath to latch input bits.\nreg [9:0] data;\nalways@(posedge clk)begin\ndata &lt;= {in,data[9:1]};\nend\n// New: Add parity checking.\nwire odd,is_start;\nassign is_start = (next_state == 4'd1);\nparity pr(.clk(clk),.reset(reset|is_start),.in(in),.odd(odd));\nreg valid;\nassign out_byte = valid? data[7:0]: 8'd0;\nassign done = (state == 4'd11) &amp; valid;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#sequence-recognition","title":"Sequence recognition","text":"<p>Website: https://hdlbits.01xz.net/wiki/Fsm_hdlc</p> <p>\u9019\u984c\u5206\u5225\u5c0d\u9023\u7e8c5\uff0c6\uff0c7\u4ee5\u4e0a\u500b1\u505a\u5224\u65b7\uff0c\u4e26\u505a\u76f8\u5c0d\u61c9\u7684\u8f38\u51fa\uff0c\u5176\u5be6\u5f88\u50cf\u9032\u968e\u7248\u7684edge detection\uff0c\u4e0d\u904e\u53ef\u4ee5\u7528FSM\u5be6\u73fe\uff0c\u53ef\u4ee5\u5c11\u5e7e\u500bregister\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput reset,    // Synchronous reset\ninput in,\noutput disc,\noutput flag,\noutput err);\nreg [3:0] state, next_state;\nparameter none = 4'd0;\nparameter one = 4'd1;\nparameter two = 4'd2;\nparameter three = 4'd3;\nparameter four = 4'd4;\nparameter five = 4'd5;\nparameter six = 4'd6;\nparameter seven = 4'd7;\nparameter discard = 4'd8;\nparameter fg = 4'd9;\nalways@(*)begin\ncase(state)\nnone: next_state = in? one: none;\none: next_state = in? two: none;\ntwo: next_state = in? three: none;\nthree: next_state = in? four: none;\nfour: next_state = in? five: none;\nfive: next_state = in? six: discard;\nsix: next_state = in? seven: fg;\nseven: next_state = in? seven: none;\ndiscard: next_state = in? one: none;\nfg: next_state = in? one: none;\ndefault: next_state = 4'bxxxx;\nendcase\nend\nalways@(posedge clk)begin\nif(reset) state &lt;= none;\nelse state &lt;= next_state;\nend\nassign disc = (state == discard);\nassign flag = (state == fg);\nassign err = (state == seven);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#q8-design-a-mealy-fsm","title":"Q8: Design a Mealy FSM","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/ece241_2013_q8</p> <p>\u9019\u984c\u61c9\u8a72\u662f\u9019\u7db2\u7ad9\u4e0a\u7b2c\u4e00\u984c\u660e\u78ba\u6307\u51fa\u9700\u4f7f\u7528mealy machine\u7684\u984c\u76ee\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput aresetn,    // Asynchronous active-low reset\ninput x,\noutput z ); reg [1:0] state, next_state;\nparameter zero_bit = 2'b00;\nparameter one_bit = 2'b01;\nparameter two_bit = 2'b10;\nalways@(*)begin\ncase(state)\nzero_bit: next_state = x? one_bit: zero_bit;\none_bit: next_state = x? one_bit: two_bit;\ntwo_bit: next_state = x? one_bit: zero_bit;\ndefault: next_state = 4'bxxxx;\nendcase\nend\nalways@(posedge clk, negedge aresetn)begin\nif(~aresetn) state &lt;= zero_bit;\nelse state &lt;= next_state;\nend\nassign z = (state == two_bit) &amp;&amp; x;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#q5a-serial-twos-complementer-moore-fsm","title":"Q5a: Serial two's complementer (Moore FSM)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q5a</p> <p>\u9019\u984c\u7528moore machine\u5beb2\u88dc\u6578\uff0c\u5c31\u53ea\u6709lsb\u76841\u8f38\u51fa\u65391\uff0c\u6c92\u4ec0\u9ebc\u592a\u96e3\u7684\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput areset,\ninput x,\noutput z\n); reg [1:0] state, next_state;\nparameter idle = 2'b00;\nparameter zero = 2'b01;\nparameter one = 2'b10;\nalways@(*)begin\ncase(state)\nidle: next_state = x? zero: idle;\nzero: next_state = x? one: zero;\none: next_state = x? one: zero;\ndefault: next_state = 2'bxx;\nendcase\nend\nalways@(posedge clk, posedge areset)begin\nif(areset) state &lt;= 2'b00;\nelse state &lt;= next_state;\nend\nassign z = (state == zero);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#q5b-serial-twos-complementer-mealy-fsm","title":"Q5b: Serial two's complementer (Mealy FSM)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q5b</p> <p>\u9019\u984c\u7528mealy machine\uff0c\u56e0\u70bamealy machine\u6bd4moore machine\u5c11\u4e00\u500bstate\uff0c\u6240\u4ee5\u8f38\u51fa\u65e9\u4e00\u500b\u9031\u671f\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput areset,\ninput x,\noutput z\n); reg state, next_state;\nparameter idle = 1'b0;\nparameter comp = 1'b1;\nassign next_state = state | x;\nalways@(posedge clk,posedge areset)begin\nif(areset) state = idle;\nelse state = next_state;\nend\nassign z = (state &amp; ~x) | (~state &amp; x);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#q3a-fsm","title":"Q3a: FSM","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/2014_q3fsm</p> <p>\u9019\u984c\u5728\u8003\u600e\u9ebc\u7b97\u4e09\u500bcycle\u5167\u6709\u5169\u500b1\uff0c\u5176\u5be6\u53ef\u4ee5\u958b\u500bdatapath\uff0c\u7136\u5f8c\u53d6xnor\u548cor\u3002\u7136\u5f8c\u6709\u500b\u7d30\u7bc0\u8981\u6ce8\u610f\uff0c\u5c31\u662f\u7576reset\u548cA\u8f49\u63db\u70baB\u6642\u8981\u5c07datapath\u66f4\u65b0\u62103'b000\uff0c\u9019\u88e1\u5f97\u5beb<code>else if(state == A) temp &lt;= 3'b000;</code>\u800c\u4e0d\u662f\u5beb<code>else if(next_state == B) temp &lt;= 3'b000;</code>\u7684\u539f\u56e0\u5728\u65bc\uff0c<code>next_state == B</code>\u4e5f\u53ef\u80fd\u4ee3\u8868<code>next_state == D</code>\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,   // Synchronous reset\ninput s,\ninput w,\noutput z\n);  reg [1:0] state, next_state;\nparameter A = 2'b00;\nparameter B = 2'b01;\nparameter C = 2'b10;\nparameter D = 2'b11;\nalways@(*)begin\ncase(state)\nA: next_state = s? B: A;\nB: next_state = C;\nC: next_state = D;\nD: next_state = B;\nendcase\nend\nreg [2:0]temp;\nalways@(posedge clk)begin if(reset) state &lt;= A;\nelse state &lt;= next_state;\nend\nalways@(posedge clk)begin if(reset) temp &lt;= 3'b000;\nelse if(state == A) temp &lt;= 3'b000;\nelse temp &lt;= {temp[1:0],w};\nend\nassign z = (state == B) &amp;&amp; ~(^temp) &amp;&amp; (|temp);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#q3b-fsm","title":"Q3b: FSM","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/2014_q3bfsm</p> <p>\u9019\u984c\u5c31\u7167table\u5bebMoore Machine\uff0c\u6c92\u4ec0\u9ebc\u96e3\u5ea6\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,   // Synchronous reset\ninput x,\noutput z\n);\nreg [2:0] state, next_state;\nalways@(*)begin\ncase(state)\n3'b000: next_state = x? 3'b001: 3'b000;\n3'b001: next_state = x? 3'b100: 3'b001;\n3'b010: next_state = x? 3'b001: 3'b010;\n3'b011: next_state = x? 3'b010: 3'b001;\n3'b100: next_state = x? 3'b100: 3'b011;\ndefault: next_state = 3'bxxx;\nendcase\nend\nalways@(posedge clk)begin\nif(reset) state &lt;= 3'b000;\nelse state &lt;= next_state;\nend\nassign z = (~state[2]&amp; state[1] &amp; state[0]) | (state[2]&amp; ~state[1] &amp; ~state[0]);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#q3c-fsm-logic","title":"Q3c: FSM logic","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/2014_q3c</p> <p>\u9019\u984c\u56e0\u70ba\u6709input clk\uff0c\u5dee\u9ede\u5beb\u77c7\u4e86\uff0c\u5be6\u969b\u4e0a\u56e0\u70ba\u9019\u984c\u7684y\u662finput\u7d66\u7684\uff0c\u6240\u4ee5\u5b8c\u5168\u4e0d\u7528\u4f7f\u7528sequential block\uff0c\u4e5f\u5c31\u7528\u4e0d\u4e0aclk\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput [2:0] y,\ninput x,\noutput Y0,\noutput z\n);\nreg [2:0] next_state;\nalways@(*)begin\ncase(y)\n3'b000: next_state = x? 3'b001: 3'b000;\n3'b001: next_state = x? 3'b100: 3'b001;\n3'b010: next_state = x? 3'b001: 3'b010;\n3'b011: next_state = x? 3'b010: 3'b001;\n3'b100: next_state = x? 3'b100: 3'b011;\ndefault: next_state = 3'bxxx;\nendcase\nend\nassign Y0 = next_state[0];\nassign z = (~y[2]&amp; y[1] &amp; y[0]) | (y[2]&amp; ~y[1] &amp; ~y[0]);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#q6b-fsm-next-state-logic","title":"Q6b: FSM next-state logic","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/m2014_q6b</p> <p>\u9019\u984c\u5c31\u7167\u8457FSM\u5716\u8868\u5beb\u5b8ccode\u5c31\u7d50\u675f\u4e86\uff0c\u6c34\u984c\u4e00\u984c\u3002 Verilog<pre><code>module top_module (\ninput [3:1] y,\ninput w,\noutput Y2);\nparameter A = 3'd0;\nparameter B = 3'd1;\nparameter C = 3'd2;\nparameter D = 3'd3;\nparameter E = 3'd4;\nparameter F = 3'd5;\nreg [3:1]next_state;\nalways@(*)begin\ncase(y)\nA: next_state = w? A: B;\nB: next_state = w? D: C;\nC: next_state = w? D: E;\nD: next_state = w? A: F;\nE: next_state = w? D: E;\nF: next_state = w? D: C;\ndefault: next_state = 3'bxxx;\nendcase\nend\nassign Y2 = next_state[2];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#q6c-fsm-one-hot-next-state-logic","title":"Q6c: FSM one-hot next-state logic","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/m2014_q6c</p> <p>\u9019\u984c\u8ddf\u4e0a\u984c\u5f88\u50cf\uff0c\u4e0d\u904e\u6539\u6210\u7528assign\u5b8c\u6210\uff0c\u6709\u95dcone hot vector\u4e00\u5f8b\u5efa\u8b70\u4f7f\u7528assign\u3002 Verilog<pre><code>module top_module (\ninput [6:1] y,\ninput w,\noutput Y2,\noutput Y4);   assign Y2 = ~w &amp; y[1];\nassign Y4 = w &amp; (y[2] | y[3] | y[5] | y[6]);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#q6-fsm","title":"Q6: FSM","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/m2014_q6</p> <p>\u9019\u984c\u5c31\u662f\u4e0a\u4e0a\u984c\u7684\u5b8c\u6574\u7248\uff0c\u628asequential logic\u5beb\u5b8c\u5c31\u7d50\u675f\u4e86\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,     // synchronous reset\ninput w,\noutput z);\nparameter A = 3'd0;\nparameter B = 3'd1;\nparameter C = 3'd2;\nparameter D = 3'd3;\nparameter E = 3'd4;\nparameter F = 3'd5;\nreg [2:0] state,next_state;\nalways@(*)begin\ncase(state)\nA: next_state = w? A: B;\nB: next_state = w? D: C;\nC: next_state = w? D: E;\nD: next_state = w? A: F;\nE: next_state = w? D: E;\nF: next_state = w? D: C;\ndefault: next_state = 3'bxxx;\nendcase\nend\nalways@(posedge clk)begin\nif(reset) state &lt;= A;\nelse state &lt;= next_state;\nend\nassign z = state[2] &amp; ~state[1];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#q2a-fsm","title":"Q2a: FSM","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/2012_q2fsm</p> <p>\u9019\u984c\u5c31\u662f\u4e0a\u984c\u628ainput w complement\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u5c31\u5beb\u5b8c\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,   // Synchronous active-high reset\ninput w,\noutput z\n);\nparameter A = 3'd0;\nparameter B = 3'd1;\nparameter C = 3'd2;\nparameter D = 3'd3;\nparameter E = 3'd4;\nparameter F = 3'd5;\nreg [2:0] state,next_state;\nalways@(*)begin\ncase(state)\nA: next_state = w? B: A;\nB: next_state = w? C: D;\nC: next_state = w? E: D;\nD: next_state = w? F: A;\nE: next_state = w? E: D;\nF: next_state = w? C: D;\ndefault: next_state = 3'bxxx;\nendcase\nend\nalways@(posedge clk)begin\nif(reset) state &lt;= A;\nelse state &lt;= next_state;\nend\nassign z = state[2] &amp; ~state[1];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#q2b-one-hot-fsm-equations","title":"Q2b: One-hot FSM equations","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/2012_q2b</p> <p>\u9019\u984c\u5c31\u662f\u4e0a\u4e0a\u4e0a\u984c\u628ainput w complement\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u5c31\u5beb\u5b8c\u3002 Verilog<pre><code>module top_module (\ninput [5:0] y,\ninput w,\noutput Y1,\noutput Y3\n);\nassign Y1 = w &amp; y[0];\nassign Y3 = ~w &amp; (y[1] | y[2] | y[4] | y[5]);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#q2a-fsm_1","title":"Q2a: FSM","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/2013_q2afsm</p> <p>\u9019\u984c\u5c31\u662f\u7167\u8457\u5716\u5bebFSM\uff0c\u6c92\u4ec0\u9ebc\u592a\u591a\u7684\u6280\u5de7\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput resetn,    // active-low synchronous reset\ninput [3:1] r,   // request\noutput [3:1] g   // grant\n); reg [1:0] state, next_state;\nparameter A = 2'b00;\nparameter B = 2'b01;\nparameter C = 2'b10;\nparameter D = 2'b11;\nalways@(*)begin\ncase(state)\nA:begin\nif(~|r) next_state = A;\nelse if(r[3:1] == 3'b100) next_state = D;\nelse if(r[2:1] == 2'b10) next_state = C;\nelse if(r[1]) next_state = B;\nelse next_state = 2'bxx;\nend\nB: next_state = r[1]? B: A;\nC: next_state = r[2]? C: A;\nD: next_state = r[3]? D: A;\nendcase\nend\nalways@(posedge clk)begin\nif(~resetn) state &lt;= A;\nelse state &lt;= next_state;\nend\nassign g = {(state == D), (state == C), (state == B)};\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#q2b-another-fsm","title":"Q2b: Another FSM","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/2013_q2bfsm</p> <p>\u9019\u984c\u5c31\u662f\u7167\u8457\u984c\u76ee\u6558\u8ff0\u5bebFSM\uff0c\u8003\u7684\u662f\u82f1\u6587\u80fd\u529b\u548cdebug\u901a\u9748\u6280\u5de7\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput resetn,    // active-low synchronous reset\ninput x,\ninput y,\noutput f,\noutput g\n); reg [3:0]state, next_state;\nparameter A = 4'd0;\nparameter f_1 = 4'd1;\nparameter zero_bit = 4'd2;\nparameter one_bit = 4'd3;\nparameter two_bit = 4'd4;\nparameter three_bit = 4'd5;\nparameter g_0 = 4'd6;\nparameter g_1 = 4'd7;\nparameter temp = 4'd8;\nalways@(*)begin\ncase(state)\nA: next_state = f_1;\nf_1: next_state = zero_bit;\nzero_bit: next_state = x? one_bit: zero_bit;\none_bit: next_state = x?  one_bit: two_bit;\ntwo_bit: next_state = x? three_bit: zero_bit;\nthree_bit: next_state = y? g_1: temp;\ng_0: next_state = g_0;\ntemp: next_state = y? g_1: g_0;\ng_1: next_state = g_1;\ndefault: next_state = 4'bxxxx;\nendcase\nend\nalways@(posedge clk)begin\nif(~resetn) state &lt;= A;\nelse state &lt;= next_state;\nend\nassign f = (state == f_1);\nassign g = (state == three_bit) | (state == temp) | (state == g_1);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#building-larger-circuits","title":"Building Larger Circuits","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#counter-with-period-1000","title":"Counter with period 1000","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/review2015_count1k</p> <p>\u9019\u984c\u53ea\u662f\u770b\u8d77\u4f86\u4f4d\u6578\u5f88\u591a\u5f88\u5687\u4eba\uff0c\u5982\u679c\u719f\u7df4\u7684\u8a71\u53ef\u4ee5\u5beb\u5f97\u5f88\u7c21\u6f54\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,\noutput reg[9:0] q);\nalways@(posedge clk)begin\nif(reset) q &lt;= 10'd0;\nelse if(q == 10'd999) q &lt;= 10'd0;\nelse q &lt;= q + 1'b1;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#4-bit-shift-register-and-down-counter","title":"4-bit shift register and down counter","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/review2015_shiftcount</p> <p>\u9019\u984c\u6211\u89ba\u5f97\u4e5f\u8aaa\u4e0d\u4e0a\u662f\u7279\u5225\u8907\u96dc\u7684\u96fb\u8def\uff0c\u524d\u9762\u66f4\u591a\u66f4\u8907\u96dc\u7684\u984c\u76ee\uff0c\u6211\u731c\u662f\u56e0\u70ba\u5e6b\u5f8c\u9762\u984c\u76ee\u92ea\u588a\u7684\u95dc\u4fc2\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput shift_ena,\ninput count_ena,\ninput data,\noutput reg[3:0] q);\nalways@(posedge clk)begin\ncase({shift_ena, count_ena})\n2'b00: q &lt;= q;\n2'b01: q &lt;= q - 1'b1;\n2'b10: q &lt;= {q[2:0],data};\n2'b11: q &lt;= 4'bxxxx;\nendcase\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#fsm-sequence-1101-recognizer","title":"FSM: Sequence 1101 recognizer","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/review2015_fsmseq</p> <p>\u9019\u984c\u6211\u89ba\u5f97\u4e5f\u8aaa\u4e0d\u4e0a\u662f\u7279\u5225\u8907\u96dc\u7684\u96fb\u8def\uff0c\u524d\u9762\u66f4\u591a\u66f4\u8907\u96dc\u7684\u984c\u76ee\uff0c\u6211\u731c\u662f\u56e0\u70ba\u5e6b\u5f8c\u9762\u984c\u76ee\u92ea\u588a\u7684\u95dc\u4fc2\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,      // Synchronous reset\ninput data,\noutput start_shifting);\nreg [2:0] state, nstate;\nparameter zero = 3'd0;\nparameter one = 3'd1;\nparameter two = 3'd2;\nparameter three = 3'd3;\nparameter four = 3'd4;\nalways@(*)begin\ncase(state)\nzero: nstate = data? one: zero;\none: nstate = data? two: zero;\ntwo: nstate = data? two: three;\nthree: nstate = data? four: zero;\nfour: nstate = four;\ndefault: nstate = 3'bxxx;\nendcase\nend\nalways@(posedge clk)begin\nif(reset) state &lt;= zero;\nelse state &lt;= nstate;\nend\nassign start_shifting = (state == four);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#fsm-enable-shift-register","title":"FSM: Enable shift register","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/review2015_fsmshift</p> <p>\u9019\u984c\u6211\u89ba\u5f97\u4e5f\u8aaa\u4e0d\u4e0a\u662f\u7279\u5225\u8907\u96dc\u7684\u96fb\u8def\uff0c\u524d\u9762\u66f4\u591a\u66f4\u8907\u96dc\u7684\u984c\u76ee\uff0c\u6211\u731c\u662f\u56e0\u70ba\u5e6b\u5f8c\u9762\u984c\u76ee\u92ea\u588a\u7684\u95dc\u4fc2\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,      // Synchronous reset\noutput shift_ena);\nreg [2:0] counter; always@(posedge clk)begin\nif(reset) counter &lt;= 3'd0;\nelse if(counter == 3'd4) counter &lt;= counter;\nelse counter &lt;= counter + 1'b1;\nend\nassign shift_ena = ~counter[2];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#fsm-the-complete-fsm","title":"FSM: The complete FSM","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/review2015_fsm</p> <p>\u9019\u984c\u5c31\u662f\u524d\u4e09\u984c\u7684\u7d9c\u5408\uff0c\u5982\u679c\u5df2\u7d93\u5beb\u904e<code>Lemmings4</code>\uff0c\u61c9\u8a72\u89ba\u5f97\u9019\u984c\u4f5b\u5fc3\u4f86\u8457\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,      // Synchronous reset\ninput data,\noutput shift_ena,\noutput counting,\ninput done_counting,\noutput done,\ninput ack );\nreg [3:0] state, nstate;\nparameter re = 4'd0;\nparameter l = 4'd1;\nparameter ll = 4'd2;\nparameter llo = 4'd3;\nparameter llol = 4'd4;\nparameter s1 = 4'd5;\nparameter s2 = 4'd6;\nparameter s3 = 4'd7;\nparameter is_counting = 4'd8;\nparameter is_done = 4'd9;\nalways@(*)begin\ncase(state)\nre: nstate = data? l: re;\nl: nstate = data? ll: re;\nll: nstate = data? ll: llo;\nllo: nstate = data? llol: re;\nllol: nstate = s1;\ns1: nstate = s2;\ns2: nstate = s3;\ns3: nstate = is_counting;\nis_counting: nstate = done_counting? is_done: is_counting;\nis_done: nstate = ack? re: is_done;\ndefault: nstate = 4'bxxxx;\nendcase\nend\nalways@(posedge clk)begin\nif(reset) state &lt;= re;\nelse state &lt;= nstate;\nend\nassign shift_ena = (state == s1) | (state == s2) | (state == s3) | (state == llol);\nassign counting = (state == is_counting);\nassign done = (state == is_done);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#the-complete-timer","title":"The complete timer","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/review2015_fancytimer</p> <p>\u9019\u984c\u55ae\u7d14\u5728\u6bd4\u8010\u5fc3\u548cdebug\u80fd\u529b\uff0c\u9806\u4fbf\u8003\u9a57\u600e\u9ebc\u7701\u7a7a\u9593\uff0c\u6211\u4e5f\u89ba\u5f97delay\u900f\u904e\u5012\u6578\u7684\u65b9\u5f0f\uff0c\u53ef\u80fd\u7a7a\u9593\u53ef\u4ee5\u5c11\u4e0d\u5c11\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput reset,      // Synchronous reset\ninput data,\noutput [3:0] count,\noutput counting,\noutput done,\ninput ack );\n//FSM\nreg [3:0] state,next_state;\nparameter re = 4'd0;\nparameter l = 4'd1;\nparameter ll = 4'd2;\nparameter llo = 4'd3;\nparameter shift_o = 4'd4;\nparameter shift_l = 4'd5;\nparameter shift_lo = 4'd6;\nparameter shift_ll = 4'd7;\nparameter is_count = 4'd8;\nparameter is_finish = 4'd9;\nalways@(*)begin\ncase(state)\nre: next_state = data ? l: re;\nl: next_state = data? ll: re;\nll: next_state = data? ll: llo;\nllo: next_state = data? shift_o: re;\nshift_o: next_state = shift_l;\nshift_l: next_state = shift_lo;\nshift_lo: next_state = shift_ll;\nshift_ll: next_state = is_count;\nis_count: next_state = ((num == 15'd999)&amp;(data_pipe == 4'd0))? is_finish: is_count;\nis_finish: next_state = ack? re: is_finish;\ndefault: next_state = 4'bxxxx;\nendcase\nend\nalways@(posedge clk)begin\nif(reset) state &lt;= re;\nelse state &lt;= next_state;\nend\n//Counter\nreg [9:0] num;\nalways@(posedge clk)begin\nif(reset) num &lt;= 10'd0;\nelse if(num == 10'd999) num &lt;= 10'd0;\nelse if(counting) num &lt;= num +10'd1;\nelse num &lt;= num;\nend\n//Data\nwire is_data_shift;\nreg [3:0] data_pipe;\nassign is_data_shift = (state == shift_o) | (state == shift_l) | (state == shift_lo) | (state == shift_ll);\nalways@(posedge clk)begin\nif(reset) data_pipe &lt;= 4'd0;\nelse if(is_data_shift) data_pipe &lt;= {data_pipe[2:0], data};\nelse if(num == 10'd999) data_pipe &lt;= data_pipe - 1'b1;\nelse data_pipe &lt;= data_pipe;\nend\nassign count = data_pipe;\nassign counting = (state == is_count);\nassign done = (state == is_finish);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#fsm-one-hot-logic-equations","title":"FSM: One-hot logic equations","text":"<p>Website: https://hdlbits.01xz.net/wiki/Exams/review2015_fsmonehot</p> <p>\u9019\u984c\u8ddf\u4e0a\u984c\u6bd4\uff0c\u4e0d\u9700\u8981\u8003\u616eclock\uff0c\u8981\u7528assign\u63a5\uff0c\u6eff\u5bb9\u6613\u7684\u3002 Verilog<pre><code>module top_module(\ninput d,\ninput done_counting,\ninput ack,\ninput [9:0] state,    // 10-bit one-hot current state\noutput B3_next,\noutput S_next,\noutput S1_next,\noutput Count_next,\noutput Wait_next,\noutput done,\noutput counting,\noutput shift_ena\n); //\n// You may use these parameters to access state bits using e.g., state[B2] instead of state[6].\nparameter S=0, S1=1, S11=2, S110=3, B0=4, B1=5, B2=6, B3=7, Count=8, Wait=9;\nassign B3_next = state[B2];\nassign S_next = (state[Wait] &amp; ack) | (state[S] &amp; ~d) | (state[S1] &amp; ~d) | (state[S110] &amp; ~d);\nassign S1_next = state[S] &amp; d;\nassign Count_next = state[B3] | (state[Count] &amp; ~done_counting);\nassign Wait_next = (state[Count] &amp; done_counting) | (state[Wait] &amp; ~ack);\nassign done = state[Wait];\nassign counting = state[Count];\nassign shift_ena = state[B0] | state[B1] | state[B2] | state[B3];\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#verification-reading-simulations","title":"Verification: Reading Simulations","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#finding-bugs-in-code","title":"Finding bugs in code","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#mux","title":"Mux","text":"<p>Website: https://hdlbits.01xz.net/wiki/Bugs_mux2</p> <p>\u7d42\u65bc\u5230\u4e86\u8981debug\u7684\u984c\u578b\u4e86\uff0c\u9019\u90e8\u5206\u76f8\u5c0d\u5148\u524d\u7684\u984c\u578b\u53cb\u5584\u8a31\u591a\uff0c\u9019\u984c\u7684bug\u51fa\u5728output\u8981\u6539\u62108bit\uff0c\u9084\u6709\u7528\u4e09\u5143\u904b\u7b97\u53ef\u80fd\u65b9\u4fbf\u4e00\u9ede\u3002 Verilog<pre><code>module top_module (\ninput sel,\ninput [7:0] a,\ninput [7:0] b,\noutput [7:0] out  );\nassign out = sel? a: b;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#nand","title":"NAND","text":"<p>Website: https://hdlbits.01xz.net/wiki/Bugs_nand3</p> <p>\u9019\u984c\u8981\u5bebnand\uff0c\u6240\u4ee5\u6700\u5f8c\u8981\u63a5\u500bnot gate\uff0c\u7136\u5f8c\u8981\u4f7f\u7528submodule\u7684\u8a71\uff0c\u53c3\u6578\u8981\u99ac\u7167\u9806\u5e8f\u7d66\uff0c\u8981\u99ac\u7167\u540d\u5b57\u7d66\u3002 Verilog<pre><code>module top_module (input a, input b, input c, output out);//\nwire out_inv;\nandgate inst1 ( .out(out_inv), .a(a), .b(b), .c(c), .d(1'b1), .e(1'b1) );\nassign out = ~out_inv;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#mux2","title":"Mux(2)","text":"<p>Website: https://hdlbits.01xz.net/wiki/Bugs_mux4</p> <p>\u9019\u984c\u554f\u984c\u51fa\u5728wire\u6c92\u958bvector\uff0csel\u4e82\u63a5\uff0c\u9084\u6709\u8b8a\u6578\u91cd\u8907\u547d\u540d\u3002 Verilog<pre><code>module top_module (\ninput [1:0] sel,\ninput [7:0] a,\ninput [7:0] b,\ninput [7:0] c,\ninput [7:0] d,\noutput [7:0] out  ); //\nwire [7:0]mux0, mux1;\nmux2 mux_0 ( sel[0],    a,    b, mux0 );\nmux2 mux_1 ( sel[0],    c,    d, mux1 );\nmux2 mux_2 ( sel[1], mux0, mux1,  out );\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#addsub","title":"Add/sub","text":"<p>Website: https://hdlbits.01xz.net/wiki/Bugs_addsubz</p> <p>\u9019\u984c\u554f\u984c\u51fa\u5728\u4ed6\u628alogical not\u548carithmetic not\u641e\u6df7\u4e86\uff0c\u9084\u6709\u6c92\u5bebelse\uff0c\u6703\u7522\u751flatch\u3002 Verilog<pre><code>// synthesis verilog_input_version verilog_2001\nmodule top_module ( input do_sub,\ninput [7:0] a,\ninput [7:0] b,\noutput reg [7:0] out,\noutput reg result_is_zero\n);//\nalways @(*) begin\ncase (do_sub)\n0: out = a+b;\n1: out = a-b;\nendcase\nif (!out)\nresult_is_zero = 1;\nelse result_is_zero = 0;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#case-statement_1","title":"Case statement","text":"<p>Website: https://hdlbits.01xz.net/wiki/Bugs_case</p> <p>\u9019\u984c\u554f\u984c\u51fa\u5728\u4ed6\u9032\u4f4d\u4e82\u5beb\uff0cbit\u4e82\u5beb\uff0c\u6539\u4e00\u4e0b\u5c31\u7d50\u675f\u4e86\u3002 Verilog<pre><code>module top_module (\ninput [7:0] code,\noutput reg [3:0] out,\noutput reg valid=1'b1 );//\nalways @(*)\ncase (code)\n8'h45: out = 4'd0;\n8'h16: out = 4'd1;\n8'h1e: out = 4'd2;\n8'h26: out = 4'd3;\n8'h25: out = 4'd4;\n8'h2e: out = 4'd5;\n8'h36: out = 4'd6;\n8'h3d: out = 4'd7;\n8'h3e: out = 4'd8;\n8'h46: out = 4'd9;\ndefault: out = 4'd0;\nendcase\nalways@(*)begin\nif(!(code == 8'h45) &amp; !(out))\nvalid = 1'b0;\nelse\nvalid = 1'b1;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#build-a-circuit-from-a-simulation-waveform","title":"Build a circuit from a simulation waveform","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#combinational-circuit-1","title":"Combinational circuit 1","text":"<p>Website: https://hdlbits.01xz.net/wiki/Sim/circuit1</p> <p>\u9019\u7cfb\u5217\u662f\u770b\u6ce2\u5f62\u5bebcode\uff0c\u4e5f\u6eff\u5feb\u6a02\u7684\u3002 Verilog<pre><code>module top_module (\ninput a,\ninput b,\noutput q );//\nassign q = a &amp; b;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#combinational-circuit-2","title":"Combinational circuit 2","text":"<p>Website: https://hdlbits.01xz.net/wiki/Sim/circuit2</p> <p>\u9019\u984c\u55ae\u7d14\u5c31\u662f\u89c0\u5bdf\u6709\u5076\u6578\u500binput\u6642\uff0coutput\u662f1\uff0c\u6240\u4ee5\u5c31\u662fxnor gate\u3002 Verilog<pre><code>module top_module (\ninput a,\ninput b,\ninput c,\ninput d,\noutput q );//\nassign q = ~(a ^ b ^ c ^ d);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#combinational-circuit-3","title":"Combinational circuit 3","text":"<p>Website: https://hdlbits.01xz.net/wiki/Sim/circuit3</p> <p>\u9019\u984c\u55ae\u7d14\u5c31\u662f\u89c0\u5bdf\uff0c\u7576\u975ec\u4e14\u975ed\uff0c\u6216\u975ea\u4e14\u975eb\u6642\uff0c\u8f38\u51fa\u70ba0\u3002\u53cd\u904e\u4f86\u8aaa\uff0c\u7576c\u6216d\uff0c\u4e14a\u6216b\u6642\uff0c\u8f38\u51fa\u70ba1\u3002 Verilog<pre><code>module top_module (\ninput a,\ninput b,\ninput c,\ninput d,\noutput q );//\nassign q = (a | b) &amp; (c | d);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#combinational-circuit-4","title":"Combinational circuit 4","text":"<p>Website: https://hdlbits.01xz.net/wiki/Sim/circuit4</p> <p>\u9019\u984c\u55ae\u7d14\u5c31\u662f\u89c0\u5bdf\uff0c\u7576b\u6216c\u6642\uff0c\u8f38\u51fa\u70ba1\u3002 Verilog<pre><code>module top_module (\ninput a,\ninput b,\ninput c,\ninput d,\noutput q );//\nassign q = b | c; // Fix me\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#combinational-circuit-5","title":"Combinational circuit 5","text":"<p>Website: https://hdlbits.01xz.net/wiki/Sim/circuit5</p> <p>\u900f\u904e\u89c0\u5bdf\u53ef\u4ee5\u77e5\u9053\uff0c\u7576c\u662f0,1,2,3\u6642\uff0c\u5c0d\u61c9\u7684\u8f38\u5165\u70bab,e,a,d\u56db\u500binput\uff0c\u5426\u5247output 4'hf\uff0c\u6216\u662f\u8aaa\u662f4'b1111\u3002 Verilog<pre><code>module top_module (\ninput [3:0] a,\ninput [3:0] b,\ninput [3:0] c,\ninput [3:0] d,\ninput [3:0] e,\noutput reg [3:0] q );\nalways@(*)begin\ncase(c)\n4'd0: q = b;\n4'd1: q = e;\n4'd2: q = a;\n4'd3: q = d;\ndefault: q = 4'hf;\nendcase\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#combinational-circuit-6","title":"Combinational circuit 6","text":"<p>Website: https://hdlbits.01xz.net/wiki/Sim/circuit6</p> <p>\u900f\u904e\u89c0\u5bdf\u53ef\u4ee5\u77e5\u9053\uff0c\u9019\u984c\u6709\u9ede\u50cf\u662fdecoder\uff0c\u4e0d\u904e\u6709\u6307\u5b9a\u7684\u8f38\u51fa\u3002 Verilog<pre><code>module top_module (\ninput [2:0] a,\noutput [15:0] q ); always@(*)begin\ncase(a)\n3'd0: q = 16'h1232;\n3'd1: q = 16'haee0;\n3'd2: q = 16'h27d4;\n3'd3: q = 16'h5a0e;\n3'd4: q = 16'h2066;\n3'd5: q = 16'h64ce;\n3'd6: q = 16'hc526;\n3'd7: q = 16'h2f19;\nendcase\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#sequential-circuit-7","title":"Sequential circuit 7","text":"<p>Website: https://hdlbits.01xz.net/wiki/Sim/circuit7</p> <p>\u900f\u904e\u89c0\u5bdf\u53ef\u4ee5\u77e5\u9053\uff0c\u9019\u984c\u5c31\u662fq\u5c31\u662fa\u63a5\u4e86inverter\uff0c\u53ea\u4e0d\u904e\u665a\u4e00\u56de\u5408\u8f38\u51fa\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput a,\noutput q );\nreg state, next_state;\nparameter zero_1 = 1'd0;\nparameter one_1 = 1'd1;\nalways@(*)begin\nnext_state = a? one_1: zero_1;\nend\nalways@(posedge clk)begin\nstate &lt;= next_state;\nend\nassign q = ~state;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#sequential-circuit-8","title":"Sequential circuit 8","text":"<p>Website: https://hdlbits.01xz.net/wiki/Sim/circuit8</p> <p>q\u7684\u8a71\u5f88\u5bb9\u6613\u770b\u51fa\u4f86\u662fnegetive edge\u7684d flip-flop\uff0cp\u7684\u8a71\u5c31\u662f\u8981\u89c0\u5bdf\u5230\u662flatch\u7d50\u69cb\u3002 Verilog<pre><code>module top_module (\ninput clock,\ninput a,\noutput p,\noutput reg q );\nassign p = clock? a: p;\nalways@(negedge clock)begin\nq &lt;= a;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#sequential-circuit-9","title":"Sequential circuit 9","text":"<p>Website: https://hdlbits.01xz.net/wiki/Sim/circuit9</p> <p>\u9019\u984c\u80fd\u89c0\u5bdf\u51fa\u662f\u500b\u8a08\u6642\u5668\u7d50\u69cb\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput a,\noutput reg[3:0] q );\nalways@(posedge clk)begin\nif(a) q &lt;= 4'd4;\nelse if(q == 4'd6) q &lt;= 4'd0;\nelse q &lt;= q + 1'd1;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#sequential-circuit-10","title":"Sequential circuit 10","text":"<p>Website: https://hdlbits.01xz.net/wiki/Sim/circuit10</p> <p>\u9019\u984c\u8981\u60f3\u6210\u662f\u4e00\u53f0FSM\uff0c\u7136\u5f8c\u597d\u597d\u89c0\u5bdf\u5728\u4e0d\u540cstate\u548cinput\u4e0b\u6642\uff0cstate\u7684\u8f38\u51fa\u3002 Verilog<pre><code>module top_module (\ninput clk,\ninput a,\ninput b,\noutput reg q,\noutput reg state  );\nreg next_state;\nalways@(*)begin\ncase(state)\n1'b0: next_state = a &amp; b;\n1'b1: next_state = a | b;\nendcase\nend\nalways@(posedge clk)begin\nstate &lt;= next_state;\nend\nassign q = state ^ a ^ b;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#verification-writing-testbenches","title":"Verification: Writing Testbenches","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#clock","title":"Clock","text":"<p>Website: https://hdlbits.01xz.net/wiki/Tb/clock</p> <p>\u9019\u984c\u662fhdlbits\u7b2c\u4e00\u6b21\u8b93\u4eba\u7df4\u7fd2testbench\uff0c\u6240\u4ee5\u5c31\u8b1b\u8a73\u7d30\u9ede\u3002 \u7b2c\u4e00\u884c\u7684\u683c\u5f0f\u662f<code>`timescale \u6642\u9593\u55ae\u4f4d/\u6642\u9593\u7cbe\u5ea6</code>\u3002 \u50cf\u8aaa\u4e0b\u5217\u7684\u7a0b\u5f0f\u6709\u8b1b\u5230<code>#5</code>\uff0c\u4ee3\u8868delay5\u500b\u6642\u9593\u55ae\u4f4d\uff0c\u7136\u5f8c\u9019\u88e1\u7684\u6642\u9593\u55ae\u4f4d\u5c31\u662f5ps\u3002 \u7136\u5f8c\u6642\u9593\u7cbe\u5ea6\u7684\u8a71\uff0c\u4ee3\u8868\u8aaa\u6a21\u64ec\u7684\u6700\u5c0f\u5c3a\u5ea6\uff0c\u53ef\u4ee5\u7c97\u7565\u7684\u7406\u89e3\u6210\u50cf\u662fc++\u7684floating point\uff0c\u6700\u5c0f\u6700\u5c0f\u53ea\u80fd\u89c0\u5bdf\u5230\u7684\u5c3a\u5ea6\uff0c\u50cf\u7a0b\u5f0f\u78bc\u9019\u88e1\u6700\u5c0f\u5c3a\u5ea6\u5c31\u662f1ps\u3002 \u6709\u95dctimescale\u7684\u8aaa\u660e\uff0c\u53ef\u4ee5\u591a\u770b\u9019\u500b\u7db2\u7ad9: https://www.chipverify.com/verilog/verilog-timescale</p> <p>\u7136\u5f8c\u5728testbench\u4e2d\uff0c\u7d66submodule\u7684input\u7528reg\uff0c\u63a5\u6536submodule\u7684output\u7528wire\u3002\u539f\u56e0\u5728\u65bc\uff0c\u5c0d\u65bcsubmodule\u4f86\u8aaa\u7684input\uff0c\u5c0dtestbench\u4f86\u8aaa\u662foutput\uff0c\u5c0d\u65bcsubmodule\u4f86\u8aaa\u7684output\uff0c\u5c0d\u65bctestbench\u662finput\u3002</p> <p>\u7136\u5f8cinitial\u88e1\u9762\u653e\u521d\u59cb\u5316\u6578\u503c\uff0c\u7136\u5f8c\u9019\u500b\u984c\u76ee\u8981\u7121\u9650\u91cd\u8907clk\uff0c\u6240\u4ee5\u4e0d\u7528\u5beb<code>$finish</code>\u3002 Verilog<pre><code>`timescale 1ps/1ps\nmodule top_module ( );\nreg clk;\ninitial begin\nclk = 1'b0;\nend\nalways #5 clk = ~clk;\ndut inst( .clk(clk)) ;\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#testbench1","title":"Testbench1","text":"<p>Website: https://hdlbits.01xz.net/wiki/Tb/tb1</p> <p>\u9019\u984c\u4e0d\u50cf\u4e0a\u984c\u8981\u4e00\u76f4\u7121\u9650clk\uff0c\u53ef\u4ee5\u900f\u904e<code>$finish</code>\u4f86\u9650\u5236\u6a21\u64ec\u6642\u9593\u3002 Verilog<pre><code>module top_module ( output reg A, output reg B );//\n// generate input patterns here\ninitial begin\nA = 1'b0;\nB = 1'b0;\n#10 A = 1'b1;\n#5 B = 1'b1;\n#5 A = 1'b0;\n#20 B = 1'b0;\n#300 $finish;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#and-gate_1","title":"AND gate","text":"<p>Website: https://hdlbits.01xz.net/wiki/Tb/and</p> <p>\u9019\u984c\u4e0d\u50cf\u4e0a\u984c\u8981\u4e00\u76f4\u7121\u9650clk\uff0c\u53ef\u4ee5\u900f\u904e<code>$finish</code>\u4f86\u9650\u5236\u6a21\u64ec\u6642\u9593\u3002 Verilog<pre><code>module top_module();\nreg [1:0]in;\nwire out;\ninitial begin\nin = 2'b00;\n#10 in = 2'b01;\n#10 in = 2'b10;\n#10 in = 2'b11;\n#20 $finish;\nend\nandgate and_gate(.in(in), .out(out));\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#testbench2","title":"Testbench2","text":"<p>Website: https://hdlbits.01xz.net/wiki/Tb/tb2</p> <p>\u9019\u984creg\u548cwire\u8b8a\u591a\u4e86\uff0c\u53ef\u4ee5\u8003\u616e\u628ainitial block\u5206\u958b\u5beb\uff0c\u53ef\u8b80\u6027\u8f03\u4f73\u3002 Verilog<pre><code>module top_module();\nreg clk, in;\nreg [2:0] s;\nwire out;\ninitial begin\nclk = 1'b0;\nend    always #5 clk = ~clk;\ninitial begin\nin = 1'b0;\n#20 in = 1'b1;\n#10 in = 1'b0;\n#10 in = 1'b1;\n#30 in = 1'b0;\nend\ninitial begin\ns = 3'd2;\n#10 s = 3'd6;\n#10 s = 3'd2;\n#10 s = 3'd7;\n#10 s = 3'd0;\nend\ninitial begin\n#100 $finish;\nend\nq7 inst(.clk(clk), .in(in), .s(s), .out(out));\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#t-flip-flop","title":"T flip-flop","text":"<p>Website: https://hdlbits.01xz.net/wiki/Tb/tff</p> <p>\u9019\u984c\u7167\u8457\u984c\u76ee\u8981\u6c42\u5beb\uff0c\u5c31\u7d50\u675f\u4e86\u3002\u5b8c\u5168\u4e0d\u7528\u8003\u616e\u6642\u9593\u9593\u9694\u5f04\u591a\u5c11\u3002 Verilog<pre><code>module top_module ();\nreg clk;\nreg reset;\nreg t;\nwire q;\ninitial begin\nclk = 1'b0;\nend\nalways #5 clk = ~clk;\ninitial begin\nreset = 1'b1;\n#10 reset = 1'b0;\nend\ninitial begin\nt = 1'b0;\n#10 t = 1'b1;\nend\ninitial begin\n#100 $finish;\nend\ntff inst(.clk(clk), .reset(reset), .t(t), .q(q));\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#cs450","title":"CS450","text":""},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#cs450timer","title":"Cs450/timer","text":"<p>Website: https://hdlbits.01xz.net/wiki/Cs450/timer</p> <p>\u9019\u984c\u55ae\u7d14\u5beb\u500bcounter\uff0c\u5c31\u7d50\u675f\u4e86\u3002 Verilog<pre><code>module top_module(\ninput clk, input load, input [9:0] data, output tc\n);  reg [9:0] counter;\nalways@(posedge clk)begin\nif(load) counter &lt;= data;\nelse if(counter == 10'd0) counter &lt;= 10'd0;\nelse counter &lt;= counter - 1'b1;\nend\nassign tc = (counter == 10'd0);\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#cs450counter-2bc","title":"Cs450/counter 2bc","text":"<p>Website: https://hdlbits.01xz.net/wiki/Cs450/counter_2bc</p> <p>\u9019\u984c\u5c31\u662f\u7167\u984c\u76ee\u5bebFSM\uff0c\u6c92\u4ec0\u9ebc\u96e3\u5ea6\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput areset,\ninput train_valid,\ninput train_taken,\noutput reg [1:0] state\n);\nreg [1:0] next_state;\nparameter SNT = 2'b00;\nparameter WNT = 2'b01;\nparameter WT = 2'b10;\nparameter ST = 2'b11;\nalways@(*)begin\nif(train_valid)begin\ncase(state)\nSNT: next_state= train_taken? WNT: SNT;\nWNT: next_state= train_taken? WT: SNT;\nWT: next_state= train_taken? ST: WNT;\nST: next_state= train_taken? ST: WT;\nendcase\nend\nelse next_state = state;\nend\nalways@(posedge clk, posedge areset)begin\nif(areset) state &lt;= WNT;\nelse state &lt;= next_state;\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#cs450history-shift","title":"Cs450/history shift","text":"<p>Website: https://hdlbits.01xz.net/wiki/Cs450/history_shift</p> <p>\u9019\u984c\u5c31\u662f\u7c21\u55ae\u7248\u7684\u9810\u6e2c\u5206\u652f\uff0c\u984c\u76ee\u5f88\u9577\uff0c\u5be6\u969b\u4e0a\u6eff\u7c21\u55ae\u7684\uff0c\u8003\u9a57\u82f1\u6587\u80fd\u529b\u3002 Verilog<pre><code>module top_module(\ninput clk,\ninput areset,\ninput predict_valid,\ninput predict_taken,\noutput reg [31:0] predict_history,\ninput train_mispredicted,\ninput train_taken,\ninput [31:0] train_history\n);\nalways@(posedge clk, posedge areset)begin\nif(areset) predict_history &lt;= 32'd0;\nelse if(train_mispredicted) predict_history &lt;= {train_history[30:0], train_taken};\nelse if(predict_valid) predict_history &lt;= {predict_history[30:0], predict_taken};\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-06-15-HDLBits/#cs450gshare","title":"Cs450/gshare","text":"<p>Website: https://hdlbits.01xz.net/wiki/Cs450/gshare</p> <p>\u9019\u984c\u5c31\u524d\u5169\u984c\u7684\u7d9c\u5408\u984c\uff0c\u8003\u9a57\u7684\u662f\u82f1\u6587\u95b1\u8b80\u80fd\u529b\uff0c Verilog<pre><code>module top_module(\ninput clk,\ninput areset,\ninput  predict_valid,\ninput  [6:0] predict_pc,\noutput predict_taken,\noutput [6:0] predict_history,\ninput train_valid,\ninput train_taken,\ninput train_mispredicted,\ninput [6:0] train_history,\ninput [6:0] train_pc\n);\n//update PHT\nreg [1:0] PHT [127:0];\nwire [6:0]hash;\nassign hash = train_pc ^ train_history;\ninteger i;    always@(posedge clk, posedge areset)begin\nif(areset)begin\nfor(i=0; i&lt;128; i++)begin\nPHT[i] &lt;= 2'b01;\nend\nend else begin\nif(train_taken &amp; train_valid) PHT[hash] &lt;= (PHT[hash] == 2'b11)? 2'b11: PHT[hash] + 2'b01;\nelse if(~train_taken &amp; train_valid) PHT[hash] &lt;= (PHT[hash] == 2'b00)? 2'b00: PHT[hash] - 2'b01;\nend\nend    assign predict_taken = PHT[predict_pc ^ predict_history][1];\n//update predict history\nalways@(posedge clk, posedge areset)begin\nif(areset) predict_history &lt;= 7'd0;\nelse if(train_valid &amp; train_mispredicted) predict_history &lt;= {train_history[5:0], train_taken};\nelse if(predict_valid) predict_history &lt;= {predict_history[5:0], predict_taken};\nend\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-07-30-nowcoder/","title":"NowCoder tutorial","text":""},{"location":"Coding%20Exercise/2023-07-30-nowcoder/#verilog","title":"Verilog","text":""},{"location":"Coding%20Exercise/2023-07-30-nowcoder/#vl1","title":"VL1 \u56db\u9009\u4e00\u591a\u8def\u5668","text":"<p>Website: https://www.nowcoder.com/practice/cba4617e1ef64e9ea52cbb400a0725a3?tpId=301&amp;tqId=5000604&amp;ru=/exam/oj&amp;qru=/ta/verilog-start/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3DVerilog%25E7%25AF%2587%26topicId%3D301</p> <p>\u4e09\u5143\u904b\u7b97\u5b50\u5c31\u662f\u4e8c\u9078\u4e00\u591a\u5de5\u5668\uff0c\u900f\u904e3\u500b\u4e09\u5143\u904b\u7b97\u5b50\uff0c\u5c31\u80fd\u5be6\u4f5c\u51fa\u4e00\u500b\u56db\u9078\u4e00\u591a\u5de5\u5668\u3002 Verilog<pre><code>`timescale 1ns/1ns\nmodule mux4_1(\ninput [1:0]d1,d2,d3,d0,\ninput [1:0]sel,\noutput[1:0]mux_out\n);\n//*************code***********//\nwire [1:0]sel1, sel2;\nassign mux_out = sel[1]? sel2: sel1;\nassign sel2 = sel[0]? d0: d1;\nassign sel1 = sel[0]? d2: d3;\n//*************code***********//\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-07-30-nowcoder/#vl2-t","title":"VL2 \u5f02\u6b65\u590d\u4f4d\u7684\u4e32\u8054T\u89e6\u53d1\u5668","text":"<p>Website: https://www.nowcoder.com/practice/9c8cb743919d405b9dac28eadecddfb5?tpId=301&amp;tags=&amp;title=&amp;difficulty=0&amp;judgeStatus=0&amp;rp=0&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3DVerilog%25E7%25AF%2587%26topicId%3D301</p> <p>\u9019\u984c\u7df4\u7fd2\u5c07TFF\u63a5\u6210pipeline\u7684\u6a23\u5b50\uff0c\u7528always block\u5c31\u80fd\u5beb\u51fasequential logic\u3002 Verilog<pre><code>`timescale 1ns/1ns\nmodule Tff_2 (\ninput wire data, clk, rst,\noutput reg q  );\n//*************code***********//\nreg temp;\nalways@(posedge clk, negedge rst) begin\nif(!rst)begin\ntemp &lt;= 1'b0;\nq &lt;= 1'b0;\nend\nelse begin\ntemp &lt;= data ^ temp;\nq &lt;= temp ^ q;\nend\nend\n//*************code***********//\nendmodule\n</code></pre></p>"},{"location":"Coding%20Exercise/2023-07-30-nowcoder/#vl3","title":"VL3 \u5947\u5076\u6821\u9a8c","text":"<p>Website: https://www.nowcoder.com/practice/67d4dd382bb44c559a1d0a023857a7a6?tpId=301&amp;tags=&amp;title=&amp;difficulty=0&amp;judgeStatus=0&amp;rp=0&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3DVerilog%25E7%25AF%2587%26topicId%3D301</p> <p>\u9019\u984c\u7df4\u7fd2\u600e\u9ebc\u4e00\u6b21xor\u4e00\u4e32array\u3002 Verilog<pre><code>`timescale 1ns/1ns\nmodule odd_sel(\ninput [31:0] bus,\ninput sel,\noutput check\n);\n//*************code***********//\nassign check = !((^bus) ^ sel);\n//*************code***********//\nendmodule\n</code></pre></p>"},{"location":"Subject/2023-02-05-It/","title":"Information theory and Data Compression","text":""},{"location":"Subject/2023-02-05-It/#information-measurement","title":"Information measurement","text":""},{"location":"Subject/2023-02-05-It/#the-definition-of-entropy","title":"The definition of entropy","text":"\\[\\begin{aligned} H(X) =  - \\sum_{x \\in X} p(x) \\log p(x) \\end{aligned} \\] <p>Entropy\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u500b\u6a5f\u7387\u5206\u4f48\u7684\u8cc7\u8a0a\u91cf\uff0c\u800c\u5982\u679centropy\u8d8a\u5927\uff0c\u4ee3\u8868\u8cc7\u8a0a\u91cf\u8d8a\u5927\u3002\u53cd\u4e4b\u5982\u679centropty\u8d8a\u5c0f\uff0c\u4ee3\u8868\u8cc7\u8a0a\u91cf\u8d8a\u5c0f\u3002</p> <p>\u8209\u4f8b\u4f86\u8aaa\uff0c\u4e00\u500b\u6295\u64f2\u51fa\u53bb\u7684\u786c\u5e63\uff0c\u662f\u6b63\u9762\u6216\u53cd\u9762\u7684\u6a5f\u7387\u70ba1\uff0c\u4e0d\u662f\u6b63\u9762\u4e5f\u4e0d\u662f\u53cd\u9762\u7684\u6a5f\u7387\u70ba0\uff0c\u986f\u7136\u9019\u53e5\u8a71\u662f\u5ee2\u8a71\u3002 \u65bc\u662f\u6211\u5011\u5c07\u4e0a\u8ff0\u7684\u6a5f\u7387\u5206\u4f48\u4ee3\u5165entropy\uff0c\u7b97\u51fa\\(-( 0 \\log 0+ 1 \\log 1 ) = 0\\)\uff0c\u5ee2\u8a71\u7684entropy\u9084\u771f\u7684\u662f0\u3002  </p> <p>\u800c\u900f\u904e\u5fae\u5206\u627e\u6975\u503c\uff0c\u986f\u7136\u7576\u4e8c\u9805\u5206\u5e03\\(p=0.5\\)\u6642\uff0centropy\u6700\u5927\uff0c\u56e0\u70ba\u9019\u500b\u6a5f\u7387\u5206\u4f48\u4e0d\u6703\u6697\u793a\u8aaa\u54ea\u500b\u4e8b\u4ef6\u767c\u751f\u7684\u53ef\u80fd\u6bd4\u8f03\u5927\u3002</p>"},{"location":"Subject/2023-02-05-It/#the-derivation-of-entropy","title":"The derivation of entropy","text":"<p>\u901a\u904e\u4e0a\u8ff0\u7c21\u55ae\u7684\u4ecb\u7d39entropy\uff0c\u63a5\u8457\u63a8\u5c0eentropy\u7684\u516c\u5f0f\u5982\u4f55\u6c42\u5f97\u3002  </p> <p>\u5047\u5982\u6709\u4e09\u500b\u4e8b\u4ef6\\(A_{1},A_{2},A_{3}\\)\uff0c\u5176\u5c0d\u61c9\u7684\u6a5f\u7387\u5206\u5225\u70ba\\(p_{1},p_{2},p_{3}\\)\u3002 \u6211\u5011\u5c07\u5176\u4e2d\u5169\u500b\u4e8b\u4ef6\\(A_{2},A_{3}\\)\u7d44\u6210\u4e00\u7d44\uff0c\u4f7f\u5f97\u53e6\u5916\u6709\u5169\u500b\u4e8b\u4ef6\uff0c\\(B_{1} = \\{ A_{1} \\}\\) \\(,\\) \\(B_{2} = \\{ A_{2} , A_{3} \\}\\)\uff0c\u5176\u5c0d\u61c9\u7684\u6a5f\u7387\u70ba\\(q_{1}=p_{1},q_{2}=p_{2}+p_{3}\\)\u3002</p> <p>\u800c\u6211\u5011\u5e0c\u671b\uff0c\u5f9e\\(A_{1},A_{2},A_{3}\\)\u7b97\u51fa\u4f86\u7684entropy\uff0c\u8981\u8207\u5148\u7b97\\(B_{1},B_{2}\\)\u7684entropy\uff0c\u518d\u6309\u6a5f\u7387\u6bd4\u4f8b\u7b97\\(B_{1},B_{2}\\)\u96c6\u5408\u5167\u7684entropy\u7684\u7e3d\u548c\u76f8\u7b49\u3002\u4e5f\u5c31\u662f  </p> \\[\\begin{aligned}  H(p_{1},p_{2},p_{3}) = H(q_{1},q_{2})+ q_{1}H(p_{1}/q_{1})+q_{2}H(p_{2}/q_{2},p_{3}/q_{2}) \\end{aligned} \\tag{1.1.1} \\] <p>\u5f97\u5230\u4e86\u95dc\u4fc2\u5f0f\u5f8c\uff0c\u6211\u5011\u7e7c\u7e8c\u63a8\u5c0eentropy\u7684\u516c\u5f0f\u3002 \u5148\u4ee4\\(H(1/n,1/n,1/n...)=A(n)\\) </p> <p>\u8209\u4f8b\u4f86\u8aaa\uff1a  </p> \\[\\begin{aligned}H(1/2,1/2)=A(2)\\end{aligned}\\] \\[\\begin{aligned}H(1/8,1/8,1/8,1/8,1/8,1/8,1/8,1/8)=A(8)\\end{aligned}\\] <p>\u800c\u5f9e\\((1.1.1)\\)\u6211\u5011\u53ef\u4ee5\u5f97\u51fa\uff1a  </p> \\[\\begin{aligned} A(8)&amp;=H(1/2,1/2)+1/2(H(1/2,1/2) \\\\&amp;+1/2H(1/2,1/2)+1/2H(1/2,1/2))\\\\&amp;=3A(2) \\end{aligned} \\] <p>\u5f9e\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u89c0\u5bdf\u51fa\u4e0b\u5f0f\uff0c\u8b49\u660e\u65b9\u6cd5\u53ef\u4ee5\u5f9e\u756b\u9846\u6a39\u4e0b\u624b  </p> \\[\\tag{1.1.2}A(j^l)=lA(j)\\] <p>\u800c\u5c0d\u65bc\u8db3\u5920\u5927\u7684\\(l\\),\u53ef\u4ee5\u627e\u5230\u4e00\u7d44\\((k,m)\\)\u4f7f\u5f97\\(A(k^m) \\le A(j^l)&lt;A(k^{m+1})\\) \u56e0\u6b64\\((1.1.2)\\)\u53ef\u4ee5\u5c07\u5176\u5316\u7c21\u70ba\\(m/l \\le A(j)/A(k) &lt; m/l + 1/l\\)\uff0c\u4e5f\u5c31\u662f  </p> \\[\\tag{1.1.3}|m/l - A(j)/A(k)| &lt; \\epsilon\\] <p>\u800c\u56e0\u70ba\\(k^m \\le j^l&lt;k^{m+1}\\)\uff0c\u4e14\\(\\log{j^l} = l \\log j\\)\uff0c\u6240\u4ee5\u900f\u904e\u985e\u4f3c\\((1.1.3)\\)\u7684\u904e\u7a0b\uff0c \u53ef\u4ee5\u5f97\u5230</p> \\[\\tag{1.1.4}|m/l - \\log (j)/ \\log(k)| &lt; \\epsilon\\] <p>\u6700\u5f8c\u5c07\\((1.1.3)\\)\u548c\\((1.1.4)\\)\u5408\u4f75\uff0c\u5f97\u5230\\(|A(j)/A(k) - \\log (j)/ \\log(k)| &lt;2 \\epsilon\\)\uff0c\u4e5f\u4ee3\u8868\u8457  </p> \\[\\tag{1.1.5}H=K \\log (n)\\] <p>\u5176\u4e2d\\(K\\)\u70ba\u5e38\u6578\u3002</p> <p>\u800c\u4e0a\u9762\u6211\u5011\u53ea\u63a2\u8a0e\u4e86\u6240\u6709\u4e8b\u4ef6\u6a5f\u7387\u76f8\u7b49\u7684\u60c5\u6cc1\uff0c\u63a5\u4e0b\u4f86\u7e7c\u7e8c\u8a0e\u8ad6\u4e8b\u4ef6\u7684\u6a5f\u7387\u4e0d\u76f8\u7b49\u7684\u60c5\u6cc1\u3002</p> <p>\u9019\u6b21\u5047\u8a2d\u6211\u5011\u6709\\(\\sum_{i \\in I} n_{i}\\)\u7a2e\u6a5f\u7387\u76f8\u7b49\u7684\u4e8b\u4ef6\u3002 \u6839\u64da\\((1.1.1)\\)\u548c\\((1.1.5)\\)\uff0c\u53ef\u4ee5\u5f97\u51fa\u4e0b\u5217\u7d50\u8ad6\u3002  </p> \\[ \\begin{aligned} H &amp;= H(p_{1},p{2}...,p_{i}) + \\sum_{i \\in I}p_{i}H(1/n_{i},...,1/n_{i}) \\\\&amp;= H(p_{1},p{2}...,p_{i})+ K\\sum_{i \\in I} p_{i} \\log(n_{i}) \\end{aligned} \\] <p>\u5de6\u53f3\u79fb\u4f4d\u5f8c\uff0c\u53ef\u4ee5\u5f97\u5230:    </p> \\[ \\begin{aligned} H(p_{1},p_{2}...,p_{i}) &amp;= K \\log (\\sum_{i \\in I} n_{i}) - K\\sum_{i \\in I} p_{i} \\log(n_{i}) \\\\&amp;= -K[\\sum_{i \\in I} p_{i} \\log(n_{i})-\\log (\\sum_{j \\in J} n_{j})] \\\\&amp;= -K[\\sum_{i=1}^{n} p_{i} \\log(n_{i})-\\log (\\sum_{j=1}^{n} n_{j}) \\sum_{i=1}^{n}p_{i}] \\\\&amp;= -K \\sum_{i=1}^{n}p_{i}\\log [n_{i}-(\\sum_{j=1}^{n} n_{j})] \\\\&amp;= -K \\sum_{i=1}^{n}p_{i}\\log[\\frac{n_{i}}{(\\sum_{j=1}^{n} n_{j})}] \\\\&amp;= -K \\sum_{i=1}^{n}p_{i}\\log p_{i} \\end{aligned} \\] <p>\u70ba\u4e86\u65b9\u4fbf\uff0c\u5c07\\(K\\)\u5e36\u5165\\(1\\)\uff0c\u6700\u5f8c\u5f97\u5230entropy\u7684\u5f0f\u5b50  </p> \\[\\tag{1.1}H=-\\sum_{i \\in I}p_{i}\\log p_{i}\\]"},{"location":"Subject/2023-02-05-It/#reference","title":"Reference","text":"<ol> <li>Elements of Information Theory, 2nd edition</li> <li>Introduction to data compression, 3rd edition</li> </ol>"},{"location":"Subject/2023-02-06-c%2B%2B/","title":"C++","text":""},{"location":"Subject/2023-02-06-c%2B%2B/#smart-pointer","title":"Smart Pointer","text":"<p>\u4e00\u822c\u7684\u6307\u91dd\u9700\u8981\u6211\u5011\u53bbnew\u548cdelete\uff0c\u4e0d\u5c11\u7a0b\u5e8f\u54e1\u90fd\u6703\u6f0f\u9084\u4e00\u4e9bmemory\u3002\u800c\u667a\u80fd\u6307\u91dd\u53ea\u9700\u8981\u8655\u7406new\u7684\u90e8\u5206\uff0cdelete\u7684\u90e8\u5206\u7a0b\u5f0f\u6703\u81ea\u52d5\u6b78\u9084\u3002  </p> <p>\u81f3\u65bc\u5982\u4f55\u5be6\u4f5c\uff0c\u667a\u80fd\u6307\u91dd\u5176\u5be6\u5c31\u662f\u4e00\u500bobject\uff0cconstructor\u7684\u90e8\u5206\u5c31\u662fnew\uff0cdestructor\u7684\u90e8\u5206\u5c31\u662fdelete\u3002\u6211\u5011\u77e5\u9053\u7576\u4e00\u500bobject\u6b63\u5e38<code>\u6216\u7570\u5e38(\u9019\u7279\u6027\u5f88\u91cd\u8981\uff0c\u4e0b\u4e00\u7bc0RAII\u6703\u7528\u5230)</code>\u7d50\u675f\u5f8c\uff0c\u5c31\u6703\u81ea\u52d5\u547c\u53ebdestructor\uff0c\u667a\u80fd\u6307\u91dd\u900f\u904e\u9019\u500b\u7279\u6027\u9054\u5230memory\u81ea\u52d5\u6b78\u9084\u7684\u52d5\u4f5c\u3002</p> <p>\u5176\u5be6\u667a\u80fd\u6307\u91dd\u5be6\u4f5c\u4e0a\u4e5f\u6709\u8a31\u591a\u7d30\u7bc0\uff0c\u4e0d\u904eC++ library\u5df2\u7d93\u6709\u5beb\u597d\u7684API\u4e86\u3002\u5e38\u898b\u7684\u667a\u80fd\u6307\u91dd\u6709:</p> <ol> <li>weak_ptr</li> <li>unique_ptr</li> <li>shared_ptr</li> </ol> <p>\u5982\u679c\u6709\u7279\u5225\u9867\u53ca\u7a0b\u5f0f\u7684\u5b89\u5168\u6027\uff0c\u9700\u8981\u7528\u5230\u667a\u80fd\u6307\u91dd\uff0c\u6211\u9019\u88e1\u63a8\u85a6\u4f7f\u7528<code>shared_ptr</code>\uff0c\u529f\u80fd\u6bd4\u8f03\u5b8c\u6574\uff0c\u6bd4\u8f03\u6c92\u6709\u5947\u602a\u7684\u7279\u6027\u3002</p>"},{"location":"Subject/2023-02-06-c%2B%2B/#raii","title":"RAII","text":"<p>RAII (Resource Acquisition Is Initialization) \u662f\u5229\u7528object\u7279\u6027\u7684\u7c21\u55ae\u6280\u8853\uff0c\u5b83\u53ef\u4ee5\u78ba\u4fdd\u6307\u91dd\u5efa\u7acb\u5931\u6548\u6642\uff0c\u89e3\u6c7a\u5176\u4ed6\u6307\u91dd\u6c92\u6709\u6b78\u9084\uff0c\u6216\u662f\u89e3\u6c7a\u6307\u91dd\u6307\u5230\u88ab\u522a\u9664object\u7684\u554f\u984c\u3002  </p> <p>\u8209\u500b\u4f8b\u5b50 C++<pre><code>class PrettyMenu{\npublic:\n...\nvoid changeBackground(std::istream&amp; imgSrc); //\u6539\u8b8a\u80cc\u666f\u5716\u7247\n...\nprivate:\nMutex mutex;//\u52a0\u5165\u4e92\u65a5\u9396\nImage* bgImage;//\u76ee\u524d\u7684\u80cc\u666f\u5716\u7247\nint imageChanges;//\u80cc\u666f\u5716\u7247\u88ab\u6539\u8b8a\u7684\u6b21\u6578\n}\n</code></pre> \u5982\u679c\u662f\u5728\u591a\u7dda\u7a0b\u7684\u60c5\u6cc1\u4e0b\uff0c<code>void changeBackground(std::istream&amp; imgSrc);</code>\u7684\u5be6\u4f5c\u65b9\u5f0f\u53ef\u80fd\u5982\u4e0b:</p> <p>C++<pre><code>PrettyMenu::void changeBackground(std::istream&amp; imgSrc){\nlock(&amp;mutex);\ndelete bgImage;\nimageChanges++;\nbgImage = new Image(imgSrc);\nunlock(&amp;mutex);\n}\n</code></pre> \u4f46\u4e0a\u8ff0\u7684\u51fd\u6578\u5176\u5be6\u5f88\u7cdf\uff0c\u5047\u5982 <code>bgImage = new Image(imgSrc);</code>\u7570\u5e38\uff0c\u9664\u4e86<code>mutex</code>\u6c38\u9060\u4e0d\u6703<code>unlock</code>\uff0c<code>bgImage</code>\u6703\u6307\u5411\u4e00\u500b\u88ab\u522a\u9664\u7684object\u5916\uff0c<code>iamgeChanges</code>\u9084\u6703\u52a0\u4e00\u3002</p> <p>\u70ba\u4e86\u89e3\u6c7a\u4e0a\u8ff0\u7684\u554f\u984c\uff0c\u6211\u5011\u5f15\u7528\u4e86RAII\u7684\u6280\u8853\uff0c\u5c07\u5716\u7247\u548cmutex\u90fd\u7528\u667a\u80fd\u6307\u91dd\u7ba1\u7406\u3002\u9806\u4fbf\u5c07<code>iamgeChanges</code>\u8b8a\u6578\u653e\u5230\u51fd\u6578\u6700\u5f8c\u9762\u3002 C++<pre><code>class Lock{\npublic:\nexplicit Lock(Mutex* pm)//explicit\u7684\u76ee\u7684\u5c31\u662f\u4e0d\u80fd\u96b1\u6027\u8f49\u578b\n: mutexPtr(pm, unlock){//\u5c07unlock\u51fd\u6578\u505a\u70ba\u522a\u9664\u5668\nlock(mutexPtr.get());\n}\nprivate:\nstd::tr1::shared_ptr&lt;Mutex&gt; mutexPtr;\n}\nclass PrettyMenu{\npublic:\n...\nvoid changeBackground(std::istream&amp; imgSrc); //\u6539\u8b8a\u80cc\u666f\u5716\u7247\n...\nprivate:\nMutex mutex;//\u52a0\u5165\u4e92\u65a5\u9396\nstd::tr1::shared_ptr&lt;Image&gt; bgImage;//\u76ee\u524d\u7684\u80cc\u666f\u5716\u7247\nint imageChanges;//\u80cc\u666f\u5716\u7247\u88ab\u6539\u8b8a\u7684\u6b21\u6578\n}\nPrettyMenu::void changeBackground(std::istream&amp; imgSrc){\nlock(&amp;mutex);\nbgImage.reset(new Image(imgSrc));\nimageChanges++;\n}\n</code></pre> \u524d\u4e00\u7bc0\u6709\u63d0\u5230\u667a\u80fd\u6307\u91dd\u7684\u7279\u6027\uff0c\u5c31\u662f\u7576object\u6b63\u5e38\u7d50\u675f(\u50cf\u8aaa\u51fd\u6578\u9000\u51fa)\u6216\u7570\u5e38\u9000\u51fa\u6642\uff0c\u667a\u80fd\u6307\u91dd\u5c31\u6703\u53eb\u51fadestructor\uff0c\u5c0d\u6307\u91dd\u81ea\u6211\u522a\u9664\u4e26\u6307\u5411\u7a7a\u503c\u3002\u5c31\u80fd\u78ba\u4fdd\u51fd\u6578\u5f88\u5b89\u5168\u3002   \u800c\u4e0a\u9762\u7a0b\u5f0f\u78bc\u4e2d\u7684<code>mutex</code>\uff0c\u5de7\u5999\u7684\u5c07\u667a\u80fd\u6307\u91dd\u7684destructor\u8a2d\u7f6e\u6210unlock\uff0c\u4e5f\u5c31\u80fd\u907f\u514d\u6389\u6703\u9396\u6b7b\u7684\u60c5\u6cc1\u767c\u751f\u3002</p>"},{"location":"Subject/2023-02-06-c%2B%2B/#reference","title":"Reference","text":"<ol> <li>Effective C++, Third Edition</li> </ol>"},{"location":"Subject/2023-02-14-fl/","title":"Formal language","text":""},{"location":"Subject/2023-02-14-fl/#regular-language","title":"Regular language","text":""},{"location":"Subject/2023-02-14-fl/#finite-automata","title":"Finite automata","text":""},{"location":"Subject/2023-02-14-fl/#the-definition-of-finite-automata","title":"The definition of finite automata","text":"<ol> <li>\\(Q\\) : state</li> <li>\\(\\sum\\) : alphabet(like action)</li> <li>\\(\\delta\\) : transition function \\((Q \\times \\sum \\rightarrow Q)\\)</li> <li>\\(q_{0}\\) \\(\\in Q\\) : start state</li> <li>\\(F \\subseteq Q\\) : the set of accept/final state</li> </ol>"},{"location":"Subject/2023-02-14-fl/#accept-the-string","title":"Accept the string","text":"<p>Accept the string \\(w=w_{0}...w_{n}\\) when 1. \\(r_{0}\\) = \\(q_{0}\\) 2. \\(\\delta(r_{i},w_{i+1}) = r_{i+1}\\) 3. \\(r_{n} \\subseteq F\\) </p>"},{"location":"Subject/2023-02-14-fl/#accept-and-recognize","title":"Accept and recognize","text":"<p>\\(L(M) =A \\rightarrow\\) \\(M\\) recoginze \\(A\\) languages or   \\(M\\) accept the set of all string \\(A\\) </p> <p>A language is called a regular language if some finite automaton recognizes it.</p>"},{"location":"Subject/2023-02-14-fl/#the-regular-operator","title":"The regular operator","text":"<ol> <li> <p>Union : If  \\(\\sum_{1} and \\sum_{2}\\)  are same.  Estabalish a machine that simultaneously track 2 machine, E.g. Cartisian product.    </p> </li> <li> <p>Concatenation</p> </li> <li>Star</li> </ol>"},{"location":"Subject/2023-09-18-nsd/","title":"Numerical Software development","text":""},{"location":"Subject/2023-09-18-nsd/#fundamental-engineering","title":"Fundamental Engineering","text":""},{"location":"Subject/2023-09-18-nsd/#shebang","title":"Shebang","text":"<p><code>#!/bin/bash</code>\u4e2d\u7684<code>#!</code>\u3002\u5728\u6a94\u6848\u4e2d\u5b58\u5728Shebang\u7684\u60c5\u6cc1\u4e0b\uff0c\u985eUnix\u4f5c\u696d\u7cfb\u7d71\u7684\u7a0b\u5f0f\u8f09\u5165\u5668\u6703\u5206\u6790Shebang\u5f8c\u7684\u5167\u5bb9\uff0c\u5c07\u9019\u4e9b\u5167\u5bb9\u4f5c\u70ba\u76f4\u8b6f\u5668\u6307\u4ee4\uff0c\u4e26\u547c\u53eb\u8a72\u6307\u4ee4\uff0c\u4e26\u5c07\u8f09\u6709Shebang\u7684\u6a94\u6848\u8def\u5f91\u4f5c\u70ba\u8a72\u76f4\u8b6f\u5668\u7684\u53c3\u6578\u3002</p>"},{"location":"Subject/2023-09-18-nsd/#variable","title":"Variable","text":""},{"location":"Subject/2023-09-18-nsd/#shell-variable-local","title":"Shell Variable (local)","text":"Bash Session<pre><code>$ shell_var=\"shell_value\"\n</code></pre>"},{"location":"Subject/2023-09-18-nsd/#environment-variable-global","title":"Environment Variable (global)","text":"Bash Session<pre><code>$ env_var=\"env_value\"\n$ export env_var\n$ export env_var2=\"other_env_value\"\n</code></pre>"},{"location":"Subject/2023-09-18-nsd/#source","title":"Source","text":"<p>dosomething.sh: Bash<pre><code>#!/bin/bash\nexport MYENVVAR=\"MYENVVAR is set to what I want\"\necho \"do something\"\n</code></pre> Without source(Child process cannot modify the current environment variable): Bash Session<pre><code>$ unset MYENVVAR\n$ ./dosomething.sh\n$ echo ${MYENVVAR:-\"MYENVVAR is not set\"}\ndo something\nMYENVVAR is not set\n</code></pre> With source(Child process can modify the current environment variable): Bash Session<pre><code>$ unset MYENVVAR\n$ source ./dosomething.sh\n$ echo ${MYENVVAR:-\"MYENVVAR is not set\"}\ndo something\nMYENVVAR is set to what I want\n</code></pre></p>"},{"location":"Subject/2023-09-18-nsd/#redirection","title":"Redirection","text":""},{"location":"Subject/2023-09-18-nsd/#simple-redirection","title":"Simple Redirection","text":"Bash Session<pre><code>$ echo \"a line output\" &gt; line.log\n$ cat line.log\na line output\n</code></pre>"},{"location":"Subject/2023-09-18-nsd/#stdout-stderr-redirection","title":"Stdout &amp; Stderr Redirection","text":"Bash Session<pre><code>$ cp nothisfile.txt another.txt 2&gt;&amp;1 &gt; /dev/null\ncp: nothisfile.txt: No such file or directory\n$ cp nothisfile.txt another.txt &gt; /dev/null 2&gt;&amp;1\n$ cat another.txt\ncat: another.txt: No such file or directory\n</code></pre>"},{"location":"Subject/2023-09-18-nsd/#stderr-to-null-device","title":"Stderr to Null Device","text":"<p>Bash Session<pre><code>$ # without redirecting stderr we see unwanted messages\n$ var=$(grep impossiblestring *)\ngrep: bind1: Is a directory\ngrep: build: Is a directory\ngrep: gtest: Is a directory\ngrep: make1: Is a directory\ngrep: make2: Is a directory\ngrep: make3: Is a directory\ngrep: make4: Is a directory\ngrep: nsd: Is a directory\ngrep: repo1: Is a directory\n$ echo $var\n</code></pre> Bash Session<pre><code>$ # throw stderr to null device and we get only the wanted information\n$ var=$(grep impossiblestring * 2&gt; /dev/null)\n$ echo $var\n</code></pre></p>"},{"location":"Subject/2023-09-18-nsd/#conditional-branching-ifelse","title":"Conditional Branching (If/Else)","text":"<p>Bash<pre><code>#!/bin/bash\nif [[ \"$(uname)\" == \"Darwin\" ]] ; then\nNP=${NP:-$(sysctl -n hw.ncpu)}\nelif [[ \"$(uname)\" == \"Linux\" ]] ; then\nNP=${NP:-$(cat /proc/cpuinfo | grep processor | wc -l)}\nelse\nNP=${NP:=1}\nfi\necho \"NP may be set to $NP\"\n</code></pre> Bash Session<pre><code>$ uname\nDarwin\n$ ./shownp.sh\nNP may be set to 8\n</code></pre></p>"},{"location":"Subject/2023-09-18-nsd/#function","title":"Function","text":"<p>Bash<pre><code>#!/bin/bash\nruncmd () {\necho \"run command: ${@:2}\"\n{ time \"${@:2}\" ; } &gt; $1 2&gt;&amp;1\necho \"done; log file: $(cd \"$(dirname $1)\" &amp;&amp; pwd)/$1\"\n}\nruncmd line1.log echo \"first command\"\nruncmd line2.log echo \"second command\"\n</code></pre> Bash Session<pre><code>$ ./bashfunction.sh\nrun command: echo first command\ndone; log file: /Users/yungyuc/hack/code/nsd/notebook/20au_nctu/02_engineering/line1.log\nrun command: echo second command\ndone; log file: /Users/yungyuc/hack/code/nsd/notebook/20au_nctu/02_engineering/line2.log\n$ cat line1.log\nfirst command\nreal  0m0.000s\nuser  0m0.000s\nsys   0m0.000s\n$ cat line2.log\nsecond command\nreal  0m0.000s\nuser  0m0.000s\nsys   0m0.000s\n</code></pre></p>"},{"location":"Subject/2023-09-18-nsd/#makeflie","title":"Makeflie","text":"<p>Make could trace the timestamp of the source file automatically.</p>"},{"location":"Subject/2023-09-18-nsd/#makefile-format","title":"Makefile Format","text":"<p>Rule: Makefile<pre><code>CXX = g++\n\ntarget ... : prerequisites ...\n    recipe\n    ...\n    ...\n</code></pre> https://seisman.github.io/how-to-write-makefile/overview.html</p>"},{"location":"Subject/2023-09-18-nsd/#automatic-variables-and-implicit-rule","title":"Automatic Variables and Implicit Rule","text":"<ul> <li> <p><code>$@</code> is the file name of the target of the rule.</p> </li> <li> <p><code>$^</code> is the file names of all the prerequisites.</p> </li> <li> <p><code>$&lt;</code> is the file name of the first prerequisite.</p> </li> <li> <p><code>%</code> in the target will match any non-empty characters, and it is expanded in the prerequisite.</p> </li> </ul> <p>Makefile<pre><code>CXX = g++\n\nhello: hello.o hellomain.o\n$(CXX) $^ -o $@\n%.o: %.cpp hello.hpp\n$(CXX) -c $&lt; -o $@\n</code></pre> Bash Session<pre><code>$ rm -f hello *.o\n$ make\ng++ -c hello.cpp -o hello.o\ng++ -c hellomain.cpp -o hellomain.o\ng++ hello.o hellomain.o -o hello\n</code></pre></p>"},{"location":"Subject/2023-09-18-nsd/#phony-targets","title":"Phony targets","text":"<p>Makefile<pre><code>.PHONY: clean\nclean:\nrm -rf hello *.o\n</code></pre> Bash Session<pre><code>$ make clean\nrm -rf hello *.o\n</code></pre></p>"},{"location":"Subject/2023-09-18-nsd/#cmake","title":"CMake","text":"<ul> <li>CMake is a two-pass build tool.</li> <li>First pass reads the input file CMakeLists.txt and generates files for the second pass.</li> <li>The second pass uses a different build tool (may be make) to build the software.</li> <li>Useful for cross-platform building.</li> <li>Bash and make can handle a little bit of the cross-platform. But the if/else is not easy to maintain.</li> </ul>"},{"location":"Subject/2023-09-18-nsd/#reference","title":"Reference","text":"<p>https://yyc.solvcon.net/en/latest/nsd/index.html</p>"}]}